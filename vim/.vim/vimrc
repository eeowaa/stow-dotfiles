" vim: fen fdm=marker
" Runtime {{{
set undodir=$HOME/.vim/undo,.
set directory=$HOME/.vim/swap,.
set backupdir=$HOME/.vim/backup,.
set viminfo+='1000,n$HOME/.vim/viminfo
" }}}
" Plugins {{{
syntax enable
filetype plugin on
"runtime macros/matchit.vim
nnoremap <silent> <F9> :TagbarToggle<CR>
let g:table_mode_corner='|'
let g:bookmark_sign='>>'
let g:bookmark_annotation_sign='##'
let g:lisp_rainbow=1
let g:surround_35="**\r**"
" }}}
" NetRW {{{
let g:netrw_list_hide='^\..*/$,\.sw[nop]$,^Session\.vim$' " cycle with `a`, toggle hidden with `gh`
let g:netrw_banner=0 " toggle with `I`
" let g:netrw_liststyle=3 " cycle with `i`
" let g:netrw_browse_split=4
" }}}
" Diffing {{{
" Override diff highlighting for all colorschemes
function! MyHighlights() abort
    " TODO: Find something that looks good in low-color terminals, too
    " TODO: Use different diff highlighting overrides for light themes
    if &t_Co > 16
        highlight DiffAdd    term=bold                           ctermbg=235                        guibg=#262626
        highlight DiffChange term=bold                           ctermbg=235                        guibg=#262626
        highlight DiffDelete term=bold               ctermfg=238 ctermbg=244 gui=bold guifg=#444444 guibg=#808080
        highlight DiffText   term=reverse cterm=bold ctermfg=255 ctermbg=196 gui=bold guifg=#ffffff guibg=Red
    endif
endfunction

augroup MyColors
    autocmd!
    autocmd ColorScheme * call MyHighlights()
augroup END

" }}}
" Transparent background {{{
" NOTE: I have this disabled for now, because it causes the background to be
"       white instead of transparent in my current environment (GNOME on X11)
" General idea: https://stackoverflow.com/a/67569365
" More suggested highlighting groups: https://gist.github.com/fuadnafiz98/d91e468c9bc4689868eb0984a29fef66
" Explanation of highlighting groups: :help highlight-groups
" autocmd SourcePost *
"     \ highlight Normal      guibg=NONE ctermbg=NONE |
"     \ highlight LineNr      guibg=NONE ctermbg=NONE |
"     \ highlight Folded      guibg=NONE ctermbg=NONE |
"     \ highlight SignColumn  guibg=NONE ctermbg=NONE |
"     \ highlight EndOfBuffer guibg=NONE ctermbg=NONE
" }}}
" Environment {{{
set nocompatible
behave mswin
if has('gui_running')
    set go-=T go-=m go-=l go-=L go-=r go-=R
        \ gcr+=a:block-Cursor gcr+=a:blinkon0
        \ novb t_vb=
    colorscheme tomorrow-night
    if has('gui_win32')
        set guifont=Lucida\ Console:h10
        set grepprg=ack\ -k
    endif
else
    set lazyredraw
    " -- BLACK
    " colorscheme default " builtin
    " colorscheme elflord " builtin
    " colorscheme pablo   " builtin
    " colorscheme maroloccio
    " colorscheme vibrantink
    " -- DARK GRAY
    " colorscheme calmar256-dark
    " colorscheme inkpot
    colorscheme jellybeans
    " colorscheme lettuce
    " -- LIGHT GRAY
    " colorscheme mustang
    " colorscheme desert256
    " colorscheme herald
    " colorscheme molokai
    " -- WHITE
    " colorscheme summerfruit256
    set grepprg=git\ grep\ -in
endif
" }}}
" Languages {{{
noremap \m :make<cr>
" ASP.NET {{{
autocmd BufNewFile,BufRead *.{master,as[pc]x,snippet} set
    \ syntax=html filetype=html
" }}}
" Bash {{{
autocmd BufNewFile,BufRead /tmp/bash-fc.*,bash_{profile,logout},*.cygport,.envrc
    \ let g:is_bash=1 | set
    \ syntax=sh filetype=sh
" }}}
" Bourne Shell {{{
autocmd BufNewFile,BufRead profile,environment set
    \ syntax=sh filetype=sh
" }}}
" Git Config {{{
autocmd BufNewFile,BufRead */git/config.d/* set
    \ syntax=gitconfig filetype=gitconfig
" }}}
" Groovy {{{
autocmd BufNewFile,BufRead *Jenkinsfile* set
    \ syntax=groovy filetype=groovy
" }}}
" JSON {{{
autocmd BufNewFile,BufRead *.{json,ipynb} set
    \ syntax=json filetype=json
    \ tabstop=2 shiftwidth=2 expandtab
    \ foldmethod=indent foldenable
" }}}
" Markdown {{{
" let g:markdown_folding=1
autocmd BufNewFile,BufRead *.{md,markdown} set
    \ syntax=markdown filetype=markdown
    \ makeprg=pandoc\ -f\ markdown\ -t\ html\ -o\ '%<.html'\ '%'
    \ nofoldenable
" }}}
" Python {{{
autocmd BufNewFile,BufRead *.{py} set
    \ tabstop=4 shiftwidth=4 expandtab
    \ foldmethod=indent foldenable
" }}}
" Terraform {{{
autocmd BufNewFile,BufRead *.tf set
    \ filetype=terraform
    \ tabstop=2 shiftwidth=2 expandtab
    \ foldmethod=indent foldenable
" }}}
" VB.NET {{{
autocmd BufNewFile,BufRead *.vb set
    \ filetype=vbnet
" }}}
" Xdefaults {{{
autocmd BufNewFile,BufRead */Xresources.d/* set
    \ syntax=xdefaults filetype=xdefaults
    \ makeprg=xrdb\ -merge\ '%'
" }}}
" Xkb {{{
autocmd BufNewFile,BufRead */xkb/* set
    \ syntax=xkb filetype=xkb
" }}}
" YAML {{{
autocmd BufNewFile,BufRead *.y{a,}ml,*/.kube/config set
    \ syntax=yaml filetype=yaml
    \ tabstop=2 shiftwidth=2 expandtab
    \ foldmethod=indent foldenable
" }}}
" See help text:
"   1. write-compiler-plugin
"   2. makeprg
"   3. errorformat
"   4. makeef
"   5. make
"   6. compiler
" See also:
"   1. https://github.com/tpope/vim-dispatch
"   2. http://stackoverflow.com/questions/9990219/vim-whats-the-difference-between-let-and-set
" }}}
" Backups {{{
set nobackup nowritebackup
" }}}
" Working Directory {{{
" Change directory to that of current file
nmap \c :cd %:p:h<CR>
set noautochdir
" }}}
" Operational Keys {{{
" Colon {{{
noremap <space> :
vnoremap <space> :
" }}}
" Escape {{{
noremap <m-;> <esc>
vnoremap <m-;> <esc>
cmap <m-;> <esc>
imap <m-;> <esc>
" }}}
" Enter {{{
nmap <c-j> <cr>
" }}}
" Backspace {{{
set backspace=indent,eol,start
" }}}
" Tab {{{
set expandtab tabstop=4 shiftwidth=4
" }}}
" }}}
" Emacs Keys {{{
" TODO <c-u> and <c-k>
cmap <c-a> <home>
cmap <c-e> <end>
cmap <c-d> <delete>
cmap <c-f> <right>
cmap <c-b> <left>
imap <c-a> <home>
imap <c-e> <end>
imap <c-d> <delete>
imap <c-f> <right>
imap <c-b> <left>
" }}}
" Formatting {{{
set fileformat=unix fileformats=unix
set smartindent autoindent
set linebreak textwidth=79
set formatoptions+=nj " formatoptions+=a
set scrolloff=0
" Headers {{{
nmap [1 yyPv$r=
nmap ]1 yypv$r=
nmap [2 yyPv$r-
nmap ]2 yypv$r-
nmap [3 I### <esc>A ###<esc>
nmap ]3 :s/### \(.*\) ###/\1/<cr>
" }}}
" }}}
" Wrapping {{{
set nowrap
noremap j gj
noremap k gk
" }}}
" Folding {{{
set foldmethod=marker
set foldminlines=0
set foldlevelstart=99
nnoremap <silent> <leader>zj :call NextClosedFold('j')<cr>
nnoremap <silent> <leader>zk :call NextClosedFold('k')<cr>
function! NextClosedFold(dir)
    let cmd = 'norm!z' . a:dir
    let view = winsaveview()
    let [l0, l, open] = [0, view.lnum, 1]
    while l != l0 && open
        exe cmd
        let [l0, l] = [l, line('.')]
        let open = foldclosed(l) < 0
    endwhile
    if open
        call winrestview(view)
    endif
endfunction
" }}}
" Windowing {{{
set splitright splitbelow
nnoremap = <c-w>+
nnoremap - <c-w>-
nnoremap _ <C-w><
nnoremap + <C-w>>
" }}}
" Searching {{{
set ignorecase smartcase incsearch
" }}}
" Saving & Quitting {{{
noremap \\ :w!<cr>
noremap \<bar> :wa!<cr>
noremap \q :qa!<cr>
" }}}

" Fix annoyances
nnoremap Y y$
inoremap # X#
set noerrorbells
set noesckeys

" Define helpful macros
let @a = 'mz0R***`z'
let @d = 'mz0R   `z'

" Local vimrc file(s)
runtime after/vimrc
