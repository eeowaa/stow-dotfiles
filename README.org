#+TITLE: stow-dotfiles

These are my dotfiles managed with GNU Stow. Use in conjunction with
[[https://github.com/eeowaa/ansible-workstations][ansible-workstations]] for a complete setup.

* Prerequisites
+ [[https://www.gnu.org/software/stow/][GNU Stow]]
  - [[https://www.gnu.org/software/stow/manual/html_node/index.html][Online manual]]
  - [[http://brandon.invergo.net/news/2012-05-26-using-gnu-stow-to-manage-your-dotfiles.html][Example usage]]
+ [[https://direnv.net/][direnv]] (optional, for development)
  - [[https://github.com/direnv/direnv#docs][Online documentation]]

* Usage
#+begin_src sh :eval no
direnv allow . # optional, for development
make <package> # calls `stow --no-folding <package>` with dependencies
#+end_src

* Packages
+ [[file:macos][macos]] [fn:1]
  - Keychain integration for SSH key passwords
  - Automatically add SSH keys to SSH Agent at launch

* Discussion
** Dotfile management systems
Dotfiles be managed in many different ways. Here are a few approaches:

1. Have a git repo in =$HOME=
2. Copied into place from a dotfile repo
   #+begin_src sh :eval no
   vim local.conf # specify local configuration
   make           # construct dotfiles to specification
   make install   # copy dotfiles into place
   #+end_src
3. Symlinked into place (this repo)

*** TODO Discuss pros and cons of each approach
- Portability
  - Dependencies
- Configurability
  - Templates
  - Includes
- Maintainability
  - Simplicity
  - Modularity

I believe that the GNU Stow approach strikes the best balance:
- Very light and portable dependencies
- No templates, but includes work for most dotfiles
- Easily the most maintainable

*** TODO Explain my experience with and rationale for using each approach
** The XDG Base Directory specification
Currently, dotfiles and data for each package are organized according to the XDG
Base Directory specification [[https://wiki.archlinux.org/index.php/XDG_Base_Directory][where feasible]]. When a program does not follow XDG
conventions by default, one of the following techniques is applied to bring it
into compliance (listed in preferred order):

1. Environment variable(s) in =.profile.d/=
2. Wrapper alias in =.environ.d/=
3. Symlinks (often found in the top-level directory)

This is mostly a holdover from when I managed dotfiles /without/ Stow, but now I
don't see as much value in deviating from default legacy paths, considering how
Stow organizes everything. Here are some reasons to get rid of XDG Base
Directory compliance:

1. It introduces significant boilerplate in config files, reducing
   signal-to-noise ratio (some Stow packages are solely for implementing XDG
   Base Directory compliance); this also increases shell startup time
2. It complicates the Stow directory structure, adding extra path components
   with duplicate organizational semantics (e.g. =zsh/.config/zsh/= vs. =zsh/=)
3. The XDG Base Directory specification is often misunderstood and abused by
   programs (e.g. caching runtime data in =$XDG_CONFIG_HOME=); why migrate from
   one imperfect system to another?

There are only a few potential benefits in keeping with the XDG Base Directory
specification to organize dotfiles, in addition to using Stow:

1. Dotfiles not already managed by Stow /might/ be more discoverable if grouped
   under =$XDG_CONFIG_HOME= (however, an opposing argument could be made for a
   flat structure in =$HOME= -- it boils down to opinion)
2. One could argue that the XDG Base Directory specification is the future of
   dotfile organization, so one might as well stay ahead of the curve (however,
   support for legacy organization is unlikely to be dropped for most projects)
3. Custom and local config files corresponding to standard dotfiles would have
   a clear place to go under =$XDG_CONFIG_HOME= (however, =$XDG_DATA_HOME= and
   =$HOME/.local/etc= would be other decent options)

In the end, I believe that implementing XDG Base Directory compliance is
low-value (arguably *no*-value) busywork when Stow does what I need. Someday I
will untangle this mess and switch back to default paths, only keeping XDG Base
Directory paths where they are the default for a given program.

** Stow directory folding
When directories are folded (symlinked back to Stow), files installed into
those directories by other processes on the system physically live in Stow,
which is the wrong place for them.

The main downside to /not/ folding directories is that when they are unstowed,
the target directories are not removed even if they are empty. This doesn't
hurt anything, though, unless the filesystem is running out of inodes.

* Reference
[fn:1] [[https://www.getpagespeed.com/work/proper-use-of-ssh-client-in-mac-os-x][https://www.getpagespeed.com/work/proper-use-of-ssh-client-in-mac-os-x]]
