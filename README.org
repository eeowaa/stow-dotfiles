#+TITLE: stow-dotfiles

These are my dotfiles managed with GNU Stow. Use in conjunction with
[[https://github.com/eeowaa/ansible-workstations][ansible-workstations]] for a complete setup.

* Prerequisites
+ [[https://www.gnu.org/software/stow/][GNU Stow]]
  - [[https://www.gnu.org/software/stow/manual/html_node/index.html][Online manual]]
  - [[http://brandon.invergo.net/news/2012-05-26-using-gnu-stow-to-manage-your-dotfiles.html][Example usage]]
+ [[https://direnv.net/][direnv]] (optional, for development)
  - [[https://github.com/direnv/direnv#docs][Online documentation]]

* Usage
#+begin_src sh
direnv allow . # optional, for development
stow <package>
#+end_src

* Packages
+ [[file:macos-ssh][macos-ssh]] [fn:1]
  - Keychain integration for private key passwords
  - Automatically add keys to SSH Agent at launch

* Discussion
Dotfile can be managed in many different ways. Here are a few approaches:

1. Have a git repo in =$HOME=
2. Copied into place from a dotfile repo
   #+begin_src sh
vim local.conf # specify local configuration
make           # construct dotfiles to specification
make install   # copy dotfiles into place
   #+end_src
3. Symlinked into place (this repo)

** TODO Discuss pros and cons of each approach
- Portability
  - Dependencies
- Configurability
  - Templates
  - Includes
- Maintainability
  - Simplicity
  - Modularity

I believe that the GNU Stow approach strikes the best balance:
- Very light and portable dependencies
- No templates, but includes work for most dotfiles
- Easily the most maintainable

** TODO Explain my experience with and rationale for using each approach
* Reference
[fn:1] [[https://www.getpagespeed.com/work/proper-use-of-ssh-client-in-mac-os-x][https://www.getpagespeed.com/work/proper-use-of-ssh-client-in-mac-os-x]]
