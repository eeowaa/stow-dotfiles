# Definition pairs are of the form  VARIABLE:DEFINITION
# NO spaces are allowed between the pair items.

# Standard system and site config files
INCLUDE:/etc/lynx.cfg
INCLUDE:/etc/defaults/etc/lynx-site.cfg

# Local config file
INCLUDE:~/.config/lynx/lynx-site.cfg

HELPFILE:file://localhost/usr/share/doc/lynx/lynx_help/lynx_help_main.html
DEFAULT_INDEX_FILE:http://lynx.isc.org/
GOTOBUFFER:FALSE
NO_PAUSE:TRUE
PARTIAL:TRUE
PARTIAL_THRES:-1
SHOW_KB_RATE:TRUE
TAGSOUP:TRUE
SHOW_CURSOR:TRUE
UNDERLINE_LINKS:TRUE
TEXTFIELDS_NEED_ACTIVATION:TRUE
HTMLSRC_TAGNAME_XFORM:1
HTMLSRC_ATTRNAME_XFORM:1
PRETTYSRC_VIEW_NO_ANCHOR_NUMBERING:TRUE

.h2 JUMP_PROMPT
# JUMP_PROMPT is the default statusline prompt for selecting a jumps file
# shortcut.  (see below).
# You can change the prompt here from that defined in userdefs.h.  Any
# trailing white space will be trimmed, and a single space is added by Lynx
# following the last non-white character.  You must set the default prompt
# before setting the default jumps file (below).  If a default jumps file
# was set via userdefs.h, and you change the prompt here, you must set the
# default jumps file again (below) for the change to be implemented.
#
#JUMP_PROMPT:Jump to (use '?' for list):


.h1 Auxiliary Facilities

.h2 JUMPFILE
# JUMPFILE is the local file checked for short-cut names for URLs
# when the user presses the 'j' (JUMP) key.  The user will be prompted
# to enter a short-cut name for an URL, which Lynx will then follow
# in a similar manner to 'g'oto; alternatively, s/he can enter '?'
# to view the full JUMPFILE list of short-cuts with associated URLs.
# There is an example jumps file in the samples subdirectory.
# If not defined here or in userdefs.h, the JUMP command will invoke
# the NO_JUMPFILE statusline message (see  LYMessages_en.h ).
#
# To allow '?' to work, include in the JUMPFILE
# a short-cut to the JUMPFILE itself, e.g.
# <dt>?<dd><a href="file://localhost/path/jumps.html">This Shortcut List</a>
#
# On VMS, use Unix SHELL syntax (including a lead slash) to define it.
#
# Alternate jumps files can be defined and mapped to keys here.  If the
# keys have already been mapped, then those mappings will be replaced,
# but you should leave at least one key mapped to the default jumps
# file.  You optionally may include a statusline prompt string for the
# mapping.  You must map upper and lowercase keys separately (beware of
# mappings to keys which the user can further remap via the 'o'ptions
# menu).  The format is:
#
#	JUMPFILE:path:key[:prompt]
#
# where path should begin with a '/' (i.e., not include file://localhost).
# Any white space following a prompt string will be trimmed, and a single
# space will be added by Lynx.
#
# In the following line, include the actual full local path to JUMPFILE,
# but do not include 'file://localhost' in the line.
#JUMPFILE:/FULL_LOCAL_PATH/jumps.html
.ex
#JUMPFILE:/Lynx_Dir/ips.html:i:IP or Interest group (? for list):


.h2 JUMPBUFFER
# Set JUMPBUFFER to TRUE if you want to have the previous jump target,
# if any, offered for reuse or editing when using the 'J'ump command.
# The default is defined in userdefs.h.  If left FALSE, the circular
# buffer of previously entered targets (shortcuts) can still be invoked
# via the Up-Arrow or Down-Arrow keys after entering the 'J'ump command.
# If multiple jumps files are installed, the recalls of shortcuts will
# be specific to each file.  If Lynx was built with PERMIT_GOTO_FROM_JUMP
# defined, any random URLs used instead of shortcuts will be stored in the
# goto URL buffer, not in the shortcuts buffer(s), and the single character
# ':' can be used as a target to invoke the goto URL buffer (as if 'g'oto
# followed by Up-Arrow had been entered).
#
#JUMPBUFFER:FALSE


.h1 Internal Behavior

.h2 SAVE_SPACE
# If SAVE_SPACE is defined, it will be used as a path prefix for the
# suggested filename in "Save to Disk" operations from the 'p'rint or
# 'd'ownload menus.  On VMS, you can use either VMS (e.g., "SYS$LOGIN:")
# or Unix syntax (including '~' for the HOME directory).  On Unix, you
# must use Unix syntax.  If the symbol is not defined, or is zero-length
# (""), no prefix will be used, and only a filename for saving in the
# current default directory will be suggested.
# This definition will be overridden if a "LYNX_SAVE_SPACE" environment
# variable has been set on Unix, or logical has been defined on VMS.
#
#SAVE_SPACE:~/foo/


.h2 REUSE_TEMPFILES
# Lynx uses temporary files for (among other purposes) the content of
# various user interface pages.  REUSE_TEMPFILES changes the behavior
# for some of these temp files, among them pages shown for HISTORY,
# VLINKS, OPTIONS, INFO, PRINT, DOWNLOAD commands.
# If set to TRUE, the same file can be used multiple times for the same
# purpose.  If set to FALSE, a new filename is generated each time before
# rewriting such a page.  With TRUE, repeated invocation of these commands
# is less likely to push previous documents out of the cache of rendered
# texts (see also DEFAULT_CACHE_SIZE).  This is especially useful with
# intermittent (dialup) network connections, when it is desirable to
# continue browsing through the cached documents after disconnecting.
# With the default setting of FALSE, there can be more than one incarnation
# of e.g. the VLINKS page cached in memory (but still only the most recently
# generated one is kept as a file), resulting in sometimes less surprising
# behaviour when returning to such a page via HISTORY or PREV_DOC functions
# (most users will not encounter and notice this difference).
#
#REUSE_TEMPFILES:FALSE


.h2 LYNX_HOST_NAME
# If LYNX_HOST_NAME is defined here or in userdefs.h, it will be
# treated as an alias for the local host name in checks for URLs on
# the local host (e.g., when the -localhost switch is set), and this
# host name, "localhost", and HTHostName (the fully qualified domain
# name of the system on which Lynx is running) will all be passed as
# local.  A different definition here will override that in userdefs.h.
#
#LYNX_HOST_NAME:www.cc.ukans.edu


.h2 LOCALHOST_ALIAS
# localhost aliases
# Any LOCALHOST_ALIAS definitions also will be accepted as local when
# the -localhost switch is set.  These need not actually be local, i.e.,
# in contrast to LYNX_HOST_NAME, you can define them to trusted hosts at
# other Internet sites.
#
.ex 2
#LOCALHOST_ALIAS:gopher.server.domain
#LOCALHOST_ALIAS:news.server.domain


.h2 LOCAL_DOMAIN
# LOCAL_DOMAIN is used for a tail match with the ut_host element of
# the utmp or utmpx structure on systems with utmp capabilities, to
# determine if a user is local to your campus or organization when
# handling -restrictions=inside_foo or outside_foo settings for ftp,
# news, telnet/tn3270 and rlogin URLs.  An "inside" user is assumed
# if your system does not have utmp capabilities.  CHANGE THIS here
# if it was not changed in userdefs.h at compilation time.
#
#LOCAL_DOMAIN:ukans.edu


.h1 Session support

.h2 AUTO_SESSION
# If AUTO_SESSION is TRUE lynx will save/restore useful information about
# your browsing history when closing/starting current lynx session if
# no command-line session switches override this setting.
# This setting is useful only if SESSION_FILE is defined here or in the user's
# .lynxrc file.
#
#AUTO_SESSION:FALSE

.h2 SESSION_FILE
# SESSION_FILE defines the file name where lynx will store user sessions.
# This setting is used only when AUTO_SESSION is true.
# Note: the default setting will store/resume each session in a different
# folder under same file name (if that is allowed by operating system)
# when lynx is invoked from different directories.
# (The current working directory may be changed inside lynx)
#
# If you want to use the same session file wherever you invoke Lynx,
# enter the full path below, eg '/home/<username>/.lynx_session'.
#
# If you do not want this feature, leave the setting commented.
# Users can still customize SESSION_FILE and AUTO_SESSION via
# their .lynxrc file.
#
#SESSION_FILE:lynx_session

.h2 SESSION_LIMIT
# SESSION_LIMIT defines maximum number of:  searched strings, goto URLs,
# visited links and history entries which will be saved in session file.  The
# minimum allowed is 1, the maximum is 10000.
#
# For instance, if SESSION_LIMIT is 250, a per-session limit of 250 entries of
# searched strings, goto URLs, visited links and history entries will be saved
# in the session file.
#
# There is no fixed limit on the number of entries which can be restored;
# It is limited only by available memory.
#
#SESSION_LIMIT:250


.h1 Character sets

.h2 CHARACTER_SET
# CHARACTER_SET defines the display character set, i.e., assumed to be
# installed on the user's terminal.  It determines which characters or strings
# will be used to represent 8-bit character entities within HTML.  New
# character sets may be defined as explained in the README files of the
# src/chrtrans directory in the Lynx source code distribution.  For Asian (CJK)
# character sets, it also determines how Kanji code will be handled.  The
# default is defined in userdefs.h and can be changed here or via the
# 'o'ptions menu.  The 'o'ptions menu setting will be stored in the user's RC
# file whenever those settings are saved, and thereafter will be used as the
# default.  For Lynx a "character set" has two names:  a MIME name (for
# recognizing properly labeled charset parameters in HTTP headers etc.), and a
# human-readable string for the 'O'ptions Menu (so you may find info about
# language or group of languages besides MIME name).  Not all 'human-readable'
# names correspond to exactly one valid MIME charset (example is "Chinese");
# in that case an appropriate valid (and more specific) MIME name should be
# used where required.  Well-known synonyms are also processed in the code.
#
# Raw (CJK) mode
#
# Lynx normally translates characters from a document's charset to display
# charset, using ASSUME_CHARSET value (see below) if the document's charset
# is not specified explicitly.  Raw (CJK) mode is OFF for this case.
# When the document charset is specified explicitly, that charset
# overrides any assumption like ASSUME_CHARSET or raw (CJK) mode.
#
# For the Asian (CJK) display character sets, the corresponding charset is
# assumed in documents, i.e., raw (CJK) mode is ON by default.  In raw CJK
# mode, 8-bit characters are not reverse translated in relation to the entity
# conversion arrays, i.e., they are assumed to be appropriate for the display
# character set.  The mode should be toggled OFF when an Asian (CJK) display
# character set is selected but the document is not CJK and its charset not
# specified explicitly.
#
# Raw (CJK) mode may be toggled by user via '@' (LYK_RAW_TOGGLE) key,
# the -raw command line switch or from the 'o'ptions menu.
#
# Raw (CJK) mode effectively changes the charset assumption about unlabeled
# documents.  You can toggle raw mode ON if you believe the document has a
# charset which does correspond to your Display Character Set.  On the other
# hand, if you set ASSUME_CHARSET the same as Display Character Set you get raw
# mode ON by default (but you get assume_charset=iso-8859-1 if you try raw mode
# OFF after it).
#
# Note that "raw" does not mean that every byte will be passed to the screen.
# HTML character entities may get expanded and translated, inappropriate
# control characters filtered out, etc.  There is a "Transparent" pseudo
# character set for more "rawness".
#
# Since Lynx now supports a wide range of platforms it may be useful to note
# the cpXXX codepages used by IBM PC compatible computers, and windows-xxxx
# used by native MS-Windows apps.  We also note that cpXXX pages rarely are
# found on Internet, but are mostly for local needs on DOS.
#
# Recognized character sets include:
#
.nf
#    string for 'O'ptions Menu          MIME name
#    ===========================        =========
#    7 bit approximations (US-ASCII)    us-ascii
#    Western (ISO-8859-1)               iso-8859-1
#    Western (ISO-8859-15)              iso-8859-15
#    Western (cp850)                    cp850
#    Western (windows-1252)             windows-1252
#    IBM PC US codepage (cp437)         cp437
#    DEC Multinational                  dec-mcs
#    Macintosh (8 bit)                  macintosh
#    NeXT character set                 next
#    HP Roman8                          hp-roman8
#    Chinese                            euc-cn
#    Japanese (EUC-JP)                  euc-jp
#    Japanese (Shift_JIS)               shift_jis
#    Korean                             euc-kr
#    Taipei (Big5)                      big5
#    Vietnamese (VISCII)                viscii
#    Eastern European (ISO-8859-2)      iso-8859-2
#    Eastern European (cp852)           cp852
#    Eastern European (windows-1250)    windows-1250
#    Latin 3 (ISO-8859-3)               iso-8859-3
#    Latin 4 (ISO-8859-4)               iso-8859-4
#    Baltic Rim (ISO-8859-13)		iso-8859-13
#    Baltic Rim (cp775)                 cp775
#    Baltic Rim (windows-1257)          windows-1257
#    Celtic (ISO-8859-14)		iso-8859-14
#    Cyrillic (ISO-8859-5)              iso-8859-5
#    Cyrillic (cp866)                   cp866
#    Cyrillic (windows-1251)            windows-1251
#    Cyrillic (KOI8-R)                  koi8-r
#    Arabic (ISO-8859-6)                iso-8859-6
#    Arabic (cp864)                     cp864
#    Arabic (windows-1256)              windows-1256
#    Greek (ISO-8859-7)                 iso-8859-7
#    Greek (cp737)                      cp737
#    Greek2 (cp869)                     cp869
#    Greek (windows-1253)               windows-1253
#    Hebrew (ISO-8859-8)                iso-8859-8
#    Hebrew (cp862)                     cp862
#    Hebrew (windows-1255)              windows-1255
#    Turkish (ISO-8859-9)               iso-8859-9
#    North European (ISO-8859-10)	iso-8859-10
#    Ukrainian Cyrillic (cp866u)        cp866u
#    Ukrainian Cyrillic (KOI8-U)        koi8-u
#    UNICODE (UTF-8)                    utf-8
#    RFC 1345 w/o Intro                 mnemonic+ascii+0
#    RFC 1345 Mnemonic                  mnemonic
#    Transparent                        x-transparent
.fi
#
# The value should be the MIME name of a character set recognized by
# Lynx (case insensitive).
# Find RFC 1345 at http://www.ics.uci.edu/pub/ietf/uri/rfc1345.txt .
#
#CHARACTER_SET:iso-8859-1

.h2 LOCALE_CHARSET
# LOCALE_CHARSET overrides CHARACTER_SET if true, using the current locale to
# lookup a MIME name that corresponds, and use that as the display charset.
#
# Note that while nl_langinfo(CODESET) itself is standardized, the return
# values and their relationship to the locale value is not.  GNU libiconv
# happens to give useful values, but other implementations are not guaranteed
# to do this.
#LOCALE_CHARSET:FALSE


.h2 ASSUME_CHARSET
# ASSUME_CHARSET changes the handling of documents which do not
# explicitly specify a charset.  Normally Lynx assumes that 8-bit
# characters in those documents are encoded according to iso-8859-1
# (the official default for the HTTP protocol).  When ASSUME_CHARSET
# is defined here or by an -assume_charset command line flag is in effect,
# Lynx will treat documents as if they were encoded accordingly.
# See above on how this interacts with "raw mode" and the Display
# Character Set.
# ASSUME_CHARSET can also be changed via the 'o'ptions menu but will
# not be saved as permanent value in user's .lynxrc file to avoid more chaos.
#
ASSUME_CHARSET:iso-8859-1


.h2 ASSUMED_DOC_CHARSET_CHOICE
.h2 DISPLAY_CHARSET_CHOICE
# It is possible to reduce the number of charset choices in the 'O'ptions menu
# for "display charset" and "assumed document charset" fields via
# DISPLAY_CHARSET_CHOICE and ASSUMED_DOC_CHARSET_CHOICE settings correspondingly.
# Each of these settings can be used several times to define the set of possible
# choices for corresponding field. The syntax for the values is
#
#	string | prefix* | *
#
# where
#
#	'string' is either the MIME name of charset or it's full name (listed
#		either in the left or in the right column of table of
#		recognized charsets), case-insensitive - e.g.  'Koi8-R' or
#		'Cyrillic (KOI8-R)' (both without quotes),
#
#	'prefix' is any string, and such value will select all charsets having
#		the name with prefix matching given (case insensitive), i.e.,
#		for the charsets listed in the table of recognized charsets,
#
.ex
# ASSUMED_DOC_CHARSET_CHOICE:cyrillic*
#		will be equal to specifying
.ex 4
# ASSUMED_DOC_CHARSET_CHOICE:cp866
# ASSUMED_DOC_CHARSET_CHOICE:windows-1251
# ASSUMED_DOC_CHARSET_CHOICE:koi8-r
# ASSUMED_DOC_CHARSET_CHOICE:iso-8859-5
#		or lines with full names of charsets.
#
#	literal string '*' (without quotes) will enable all charset choices
#		in corresponding field.  This is useful for overriding site
#		defaults in private pieces of lynx.cfg included via INCLUDE
#		directive.
#
# Default values for both settings are '*', but any occurrence of settings
# with values that denote any charsets will make only listed choices available
# for corresponding field.
#ASSUMED_DOC_CHARSET_CHOICE:*
#DISPLAY_CHARSET_CHOICE:*


.h2 ASSUME_LOCAL_CHARSET
# ASSUME_LOCAL_CHARSET is like ASSUME_CHARSET but only applies to local
# files.  If no setting is given here or by an -assume_local_charset
# command line option, the value for ASSUME_CHARSET or -assume_charset
# is used.  It works for both text/plain and text/html files.
# This option will ignore "raw mode" toggling when local files are viewed
# (it is "stronger" than "assume_charset" or the effective change
# of the charset assumption caused by changing "raw mode"),
# so only use when necessary.
#
#ASSUME_LOCAL_CHARSET:iso-8859-1


.h2 PREPEND_CHARSET_TO_SOURCE
# PREPEND_CHARSET_TO_SOURCE:TRUE tells Lynx to prepend a META CHARSET line
# to text/html source files when they are retrieved for 'd'ownloading
# or passed to 'p'rint functions, so HTTP headers will not be lost.
# This is necessary for resolving charset for local html files,
# while the assume_local_charset is just an assumption.
# For the 'd'ownload option, a META CHARSET will be added only if the HTTP
# charset is present.  The compilation default is TRUE.
# It is generally desirable to have charset information for every local
# html file, but META CHARSET string potentially could cause
# compatibility problems with other browsers, see also PREPEND_BASE_TO_SOURCE.
# Note that the prepending is not done for -source dumps.
#
#PREPEND_CHARSET_TO_SOURCE:TRUE


.h2 NCR_IN_BOOKMARKS
# NCR_IN_BOOKMARKS:TRUE allows you to save 8-bit characters in bookmark titles
# in the unicode format (NCR).  This may be useful if you need to switch
# display charsets frequently.  This is the case when you use Lynx on different
# platforms, e.g., on UNIX and from a remote PC, and want to keep the bookmarks
# file persistent.
# Another aspect is compatibility:  NCR is part of I18N and HTML4.0
# specifications supported starting with Lynx 2.7.2, Netscape 4.0 and MSIE 4.0.
# Older browser versions will fail so keep NCR_IN_BOOKMARKS:FALSE if you
# plan to use them.
#
#NCR_IN_BOOKMARKS:FALSE


.h2 FORCE_8BIT_TOUPPER
# FORCE_8BIT_TOUPPER overrides locale settings and uses internal 8-bit
# case-conversion mechanism for case-insensitive searches in non-ASCII display
# character sets.  It is FALSE by default and should not be changed unless
# you encounter problems with case-insensitive searches.
#
#FORCE_8BIT_TOUPPER:FALSE


.h2 OUTGOING_MAIL_CHARSET
# While Lynx supports different platforms and display character sets
# we need to limit the charset in outgoing mail to reduce
# trouble for remote recipients who may not recognize our charset.
# You may try US-ASCII as the safest value (7 bit), any other MIME name,
# or leave this field blank (default) to use the display character set.
# Charset translations currently are implemented for mail "subjects= " only.
#
#OUTGOING_MAIL_CHARSET:


.h2 ASSUME_UNREC_CHARSET
# If Lynx encounters a charset parameter it doesn't recognize, it will
# replace the value given by ASSUME_UNREC_CHARSET (or a corresponding
# -assume_unrec_charset command line option) for it.  This can be used
# to deal with charsets unknown to Lynx, if they are "sufficiently
# similar" to one that Lynx does know about, by forcing the same
# treatment.  There is no default, and you probably should leave this
# undefined unless necessary.
#
#ASSUME_UNREC_CHARSET:iso-8859-1

.h2 PREFERRED_LANGUAGE
# PREFERRED_LANGUAGE is the language in MIME notation (e.g., "en",
# "fr") which will be indicated by Lynx in its Accept-Language headers
# as the preferred language.  If available, the document will be
# transmitted in that language.  Users can override this setting via
# the 'o'ptions menu and save that preference in their RC file.
# This may be a comma-separated list of languages in decreasing preference.
#
#PREFERRED_LANGUAGE:en

.h2 CHARSET_SWITCH_RULES
# CHARSET_SWITCH_RULES hints lynx on how to choose the best display font given
# the document encoding.  This string is a sequence of chunks, each chunk
# having the following form:
#
# IN_CHARSET1 IN_CHARSET2 ... IN_CHARSET5 :OUT_CHARSET
#
# For readability, one may insert arbitrary additional punctuation (anything
# but : is ignored).  E.g., if lynx is able to switch only to display charsets
# cp866, cp850, cp852, and cp862, then the following setting may be useful
# (split for readability):
#
# CHARSET_SWITCH_RULES: koi8-r ISO-8859-5 windows-1251 cp866u KOI8-U :cp866,
#	iso-8859-1 windows-1252 ISO-8859-15 :cp850,
#	ISO-8859-2 windows-1250 :cp852,
#	ISO-8859-8 windows-1255 :cp862
#
#CHARSET_SWITCH_RULES:

.h2 FORMS_OPTIONS
# Toggle whether the Options Menu is key-based or form-based;
# the key-based version is available only if specified at compile time.
#FORMS_OPTIONS:TRUE

.h2 USE_SELECT_POPUPS
# If USE_SELECT_POPUPS is set FALSE, Lynx will present a vertical list of
# radio buttons for the OPTIONs in SELECT blocks which lack the MULTIPLE
# attribute, instead of using a popup menu.  Note that if the MULTIPLE
# attribute is present in the SELECT start tag, Lynx always will create a
# vertical list of checkboxes for the OPTIONs.
# The default defined here or in userdefs.h can be changed via the 'o'ptions
# menu and saved in the RC file, and always can be toggled via the -popup
# command line switch.
#
#USE_SELECT_POPUPS:TRUE

.h2 BOLD_HEADERS
# If BOLD_HEADERS is set to TRUE the HT_BOLD default style will be acted
# upon for <H1> through <H6> headers.  The compilation default is FALSE
# (only the indentation styles are acted upon, but see BOLD_H1, below).
# On Unix, compilation with -DUNDERLINE_LINKS also will apply to the
# HT_BOLD style for headers when BOLD_HEADERS is TRUE.
#
#BOLD_HEADERS:FALSE


.h2 BOLD_H1
# If BOLD_H1 is set to TRUE the HT_BOLD default style will be acted
# upon for <H1> headers even if BOLD_HEADERS is FALSE.  The compilation
# default is FALSE.  On Unix, compilation with -DUNDERLINE_LINKS also
# will apply to the HT_BOLD style for headers when BOLD_H1 is TRUE.
#
#BOLD_H1:FALSE


.h2 BOLD_NAME_ANCHORS
# If BOLD_NAME_ANCHORS is set to TRUE the content of anchors without
# an HREF attribute, (i.e., anchors with a NAME or ID attribute) will
# have the HT_BOLD default style.  The compilation default is FALSE.
# On Unix, compilation with -DUNDERLINE_LINKS also will apply to the
# HT_BOLD style for NAME (ID) anchors when BOLD_NAME_ANCHORS is TRUE.
#
#BOLD_NAME_ANCHORS:FALSE


.h1 Internal Behavior

.h2 DEFAULT_CACHE_SIZE
.h2 DEFAULT_VIRTUAL_MEMORY_SIZE
# The DEFAULT_CACHE_SIZE specifies the number of WWW documents to be
# cached in memory at one time.
#
# This so-called cache size (actually, number) is defined in userdefs.h and
# may be modified here and/or with the command line argument -cache=NUMBER
# The minimum allowed value is 2, for the current document and at least one
# to fetch, and there is no absolute maximum number of cached documents.
# On Unix, and VMS not compiled with VAXC, whenever the number is exceeded
# the least recently displayed document will be removed from memory.
#
# On VMS compiled with VAXC, the DEFAULT_VIRTUAL_MEMORY_SIZE specifies the
# amount (bytes) of virtual memory that can be allocated and not yet be freed
# before previous documents are removed from memory.  If the values for both
# the DEFAULT_CACHE_SIZE and DEFAULT_VIRTUAL_MEMORY_SIZE are exceeded, then
# the least recently displayed documents will be freed until one or the other
# value is no longer exceeded.  The default value is defined in userdefs.h.
#
# The Unix and VMS (but not VAXC) implementations use the C library malloc's
# and calloc's for memory allocation, but procedures for taking the actual
# amount of cache into account still need to be developed.  They use only
# the DEFAULT_CACHE_SIZE value, and that specifies the absolute maximum
# number of documents to cache (rather than the maximum number only if
# DEFAULT_VIRTUAL_MEMORY_SIZE has been exceeded, as with VAXC/VAX).
#
#DEFAULT_CACHE_SIZE:10
#DEFAULT_VIRTUAL_MEMORY_SIZE:512000


.h2 SOURCE_CACHE
# SOURCE_CACHE sets the source caching behavior for Lynx:
# FILE causes Lynx to keep a temporary file for each cached document
#   containing the HTML source of the document, which it uses to regenerate
#   the document when certain settings are changed (for instance,
#   historical vs. minimal vs. valid comment parsing) instead of reloading
#   the source from the network.
# MEMORY is like FILE, except the document source is kept in memory.  You
#   may wish to adjust DEFAULT_CACHE_SIZE and DEFAULT_VIRTUAL_MEMORY_SIZE
#   accordingly.
# NONE is the default; the document source is not cached, and is reloaded
#   from the network when needed.
#
#SOURCE_CACHE:NONE


.h2 SOURCE_CACHE_FOR_ABORTED
# This setting controls what will happen with cached source for the document
# being fetched from the net if fetching was aborted (either user pressed
# 'z' or network went down). If set to KEEP, the source fetched so far will
# be preserved (and used as cache), if set to DROP lynx will drop the
# source cache for that document (i.e. only completely downloaded documents
# will be cached in that case).
#SOURCE_CACHE_FOR_ABORTED:DROP

.h2 ALWAYS_RESUBMIT_POSTS
# If ALWAYS_RESUBMIT_POSTS is set TRUE, Lynx always will resubmit forms
# with method POST, dumping any cache from a previous submission of the
# form, including when the document returned by that form is sought with
# the PREV_DOC command or via the history list.  Lynx always resubmits
# forms with method POST when a submit button or a submitting text input
# is activated, but normally retrieves the previously returned document
# if it had links which you activated, and then go back with the PREV_DOC
# command or via the history list.
#
# The default defined here or in userdefs.h can be toggled via
# the -resubmit_forms command line switch.
#
#ALWAYS_RESUBMIT_POSTS:FALSE

.h2 TRIM_INPUT_FIELDS
# If TRIM_INPUT_FIELDS is set TRUE, Lynx will trim trailing whitespace (e.g.,
# space, tab, carriage return, line feed and form feed) from the text entered
# into form text and textarea fields.  Older versions of Lynx do this trimming
# unconditionally, but other browsers do not, which would yield different
# behavior for CGI scripts.
#TRIM_INPUT_FIELDS:FALSE

.h1 HTML Parsing

.h2 NO_ISMAP_IF_USEMAP
# If NO_ISMAP_IF_USEMAP is set TRUE, Lynx will not include a link to the
# server-side image map if both a server-side and client-side map for the
# same image is indicated in the HTML markup.  The compilation default is
# FALSE, such that a link with "[ISMAP]" as the link name, followed by a
# hyphen, will be prepended to the ALT string or "[USEMAP]" pseudo-ALT for
# accessing Lynx's text-based rendition of the client-side map (based on
# the content of the associated MAP element).  If the "[ISMAP]" link is
# activated, Lynx will send a 0,0 coordinate pair to the server, which
# Lynx-friendly sites can map to a for-text-client document, homologous
# to what is intended for the content of a FIG element.
#
# The compilation default, or default defined here, can be toggled via
# the "-ismap" command line switch.
#
#NO_ISMAP_IF_USEMAP:FALSE


.h2 SEEK_FRAG_MAP_IN_CUR
# If SEEK_FRAG_MAP_IN_CUR is set FALSE, then USEMAP attribute values
# (in IMG or OBJECT tags) consisting of only a fragment (USEMAP="#foo")
# will be resolved with respect to the current document's base, which
# might not be the same as the current document's URL.
# The compilation default is to use the current document's URL in all
# cases (i.e., assume the MAP is present below, if it wasn't present
# above the point in the HTML stream where the USEMAP attribute was
# detected).  Lynx's present "single pass" rendering engine precludes
# checking below before making the decision on how to resolve a USEMAP
# reference consisting solely of a fragment.
#
#SEEK_FRAG_MAP_IN_CUR:TRUE


.h2 SEEK_FRAG_AREA_IN_CUR
# If SEEK_FRAG_AREA_IN_CUR is set FALSE, then HREF attribute values
# in AREA tags consisting of only a fragment (HREF="#foo") will be
# resolved with respect to the current document's base, which might
# not be the same as the current document's URL.  The compilation
# default is to use the current document's URL, as is done for the
# HREF attribute values of Anchors and LINKs that consist solely of
# a fragment.
#
#SEEK_FRAG_AREA_IN_CUR:TRUE


.h1 CGI scripts
# These settings control Lynx's ability to execute various types of scripts.

.h2 LOCAL_EXECUTION_LINKS_ALWAYS_ON
.h2 LOCAL_EXECUTION_LINKS_ON_BUT_NOT_REMOTE
# Local execution links and scripts are by default completely disabled,
# unless a change is made to the userdefs.h file to enable them or
# the configure script is used with the corresponding options
# (--enable-exec-links and --enable-exec-scripts).
# See the Lynx source code distribution and the userdefs.h
# file for more detail on enabling execution links and scripts.
#
# If you have enabled execution links or scripts the following
# two variables control Lynx's action when an execution link
# or script is encountered.
#
# If LOCAL_EXECUTION_LINKS_ALWAYS_ON is set to TRUE any execution
# link or script will be executed no matter where it came from.
# This is EXTREMELY dangerous.  Since Lynx can access files from
# anywhere in the world, you may encounter links or scripts that
# will cause damage or compromise the security of your system.
#
# If LOCAL_EXECUTION_LINKS_ON_BUT_NOT_REMOTE is set to TRUE only
# links or scripts that reside on the local machine and are
# referenced with a URL beginning with "file://localhost/" or meet
# TRUSTED_EXEC or ALWAYS_TRUSTED_EXEC rules (see below) will be
# executed.  This is much less dangerous than enabling all execution
# links, but can still be dangerous.
#
#LOCAL_EXECUTION_LINKS_ALWAYS_ON:FALSE
LOCAL_EXECUTION_LINKS_ON_BUT_NOT_REMOTE:TRUE


.h2 TRUSTED_EXEC
# If LOCAL_EXECUTION_LINK_ON_BUT_NOT_REMOTE is TRUE, and no TRUSTED_EXEC
# rule is defined, it defaults to "file://localhost/" and any lynxexec
# or lynxprog command will be permitted if it was referenced from within
# a document whose URL begins with that string.  If you wish to restrict the
# referencing URLs further, you can extend the string to include a trusted
# path.  You also can specify a trusted directory for http URLs, which will
# then be treated as if they were local rather than remote.  For example:
#
#	TRUSTED_EXEC:file://localhost/trusted/
#	TRUSTED_EXEC:http://www.wfbr.edu/trusted/
#
# If you also wish to restrict the commands which can be executed, create
# a series of rules with the path (Unix) or command name (VMS) following
# the string, separated by a tab.  For example:
#
# Unix:
# ====
#	TRUSTED_EXEC:file://localhost/<tab>/bin/cp
#	TRUSTED_EXEC:file://localhost/<tab>/bin/rm
# VMS:
# ===
#	TRUSTED_EXEC:file://localhost/<tab>copy
#	TRUSTED_EXEC:file://localhost/<tab>delete
#
# Once you specify a TRUSTED_EXEC referencing string, the default is
# replaced, and all the referencing strings you desire must be specified
# as a series.  Similarly, if you associate a command with the referencing
# string, you must specify all of the allowable commands as a series of
# TRUSTED_EXEC rules for that string.  If you specify ALWAYS_TRUSTED_EXEC
# rules below, you need not repeat them as TRUSTED_EXEC rules.
#
# If EXEC_LINKS and JUMPFILE have been defined, any lynxexec or lynxprog
# URLs in that file will be permitted, regardless of other settings.  If
# you also set LOCAL_EXECUTION_LINKS_ON_BUT_NOT_REMOTE:TRUE and a single
# TRUSTED_EXEC rule that will always fail (e.g., "none"), then *ONLY* the
# lynxexec or lynxprog URLs in JUMPFILE (and any ALWAYS_TRUSTED_EXEC rules,
# see below) will be allowed.  Note, however, that if Lynx was compiled with
# CAN_ANONYMOUS_JUMP set to FALSE (default is TRUE), or -restrictions=jump
# is included with the -anonymous switch at run time, then users of an
# anonymous account will not be able to access the jumps file or enter
# 'j'ump shortcuts, and this selective execution feature will be overridden
# as well (i.e., they will only be able to access lynxexec or lynxprog
# URLs which meet any ALWAYS_TRUSTED_EXEC rules).
#
#TRUSTED_EXEC:none


.h2 ALWAYS_TRUSTED_EXEC
# If EXEC_LINKS was defined, any lynxexec or lynxprog URL can be made
# always enabled by an ALWAYS_TRUSTED_EXEC rule for it.  This is useful for
# anonymous accounts in which you have disabled execution links generally,
# and may also have disabled jumps file links, but still want to allow
# execution of particular utility scripts or programs.  The format is
# like that for TRUSTED_EXEC.  For example:
#
# Unix:
# ====
#   ALWAYS_TRUSTED_EXEC:file://localhost/<tab>/usr/local/kinetic/bin/usertime
#   ALWAYS_TRUSTED_EXEC:http://www.more.net/<tab>/usr/local/kinetic/bin/who.sh
# VMS:
# ===
#   ALWAYS_TRUSTED_EXEC:file://localhost/<tab>usertime
#   ALWAYS_TRUSTED_EXEC:http://www.more.net/<tab>show users
#
# The default ALWAYS_TRUSTED_EXEC rule is "none".
#
#ALWAYS_TRUSTED_EXEC:none


.h2 TRUSTED_LYNXCGI
# Unix:
# =====
# TRUSTED_LYNXCGI rules define the permitted sources and/or paths for
# lynxcgi links (if LYNXCGI_LINKS is defined in userdefs.h).  The format
# is the same as for TRUSTED_EXEC rules (see above).  Example rules:
#
#	TRUSTED_LYNXCGI:file://localhost/
# 	TRUSTED_LYNXCGI:<tab>/usr/local/etc/httpd/cgi-bin/
# 	TRUSTED_LYNXCGI:file://localhost/<tab>/usr/local/www/cgi-bin/
#
# VMS:
# ====
# Do not define this.
#
# The default TRUSTED_LYNXCGI rule is "none".
#
TRUSTED_LYNXCGI:none


.h2 LYNXCGI_ENVIRONMENT
# Unix:
# =====
# LYNXCGI_ENVIRONMENT adds the current value of the specified
# environment variable to the list of environment variables passed on to the
# lynxcgi script.  Useful variables are HOME, USER, etc...  If proxies
# are in use, and the script invokes another copy of lynx (or a program like
# wget) in a subsidiary role, it can be useful to add http_proxy and other
# *_proxy variables.
#
# VMS:
# ====
# Do not define this.
#
#LYNXCGI_ENVIRONMENT:


.h2 LYNXCGI_DOCUMENT_ROOT
# Unix:
# =====
# LYNXCGI_DOCUMENT_ROOT is the value of DOCUMENT_ROOT that will be passed
# to lynxcgi scripts.  If set and the URL has PATH_INFO data, then
# PATH_TRANSLATED will also be generated.  Examples:
#	LYNXCGI_DOCUMENT_ROOT:/usr/local/etc/httpd/htdocs
#	LYNXCGI_DOCUMENT_ROOT:/data/htdocs/
#
# VMS:
# ====
# Do not define this.
#
#LYNXCGI_DOCUMENT_ROOT:


.h1 Cookies

.h2 FORCE_SSL_COOKIES_SECURE
# If FORCE_SSL_COOKIES_SECURE is set to TRUE, then SSL encrypted cookies
# received from https servers never will be sent unencrypted to http
# servers.  The compilation default is to impose this block only if the
# https server included a secure attribute for the cookie.  The normal
# default or that defined here can be toggled via the -force_secure
# command line switch.
#
#FORCE_SSL_COOKIES_SECURE:FALSE

.h2 SET_COOKIES
# If SET_COOKIES is set FALSE, Lynx will ignore Set-Cookie headers
# in http server replies.  Note that if a COOKIE_FILE is in use (see
# below) that contains cookies at startup, Lynx will still send those
# persistent cookies in requests as appropriate.  Setting SET_COOKIES
# to FALSE just prevents accepting any new cookies from servers.  To
# prevent all cookie processing (sending *and* receiving) in a session,
# make sure that PERSISTENT_COOKIES is not TRUE or that COOKIE_FILE does
# not point to a file with cookies, in addition to setting SET_COOKIES
# to FALSE.
# The default is defined in userdefs.h, and can be overridden here,
# and/or toggled via the -cookies command line switch.
#
#SET_COOKIES:TRUE

.h2 ACCEPT_ALL_COOKIES
# If ACCEPT_ALL_COOKIES is set TRUE, Lynx will accept cookies from all
# domains with no user interaction.  This is equivalent to automatically
# replying to all cookie 'Allow?' prompts with 'A'lways.  Note that it
# does not preempt validity checking, which has to be controlled separately
# (see below).
# The default is defined in userdefs.h and can be overridden here, or
# in the .lynxrc file via an o(ptions) screen setting.  It may also be
# toggled via the -accept_all_cookies command line switch.
#
ACCEPT_ALL_COOKIES:TRUE

.h2 COOKIE_ACCEPT_DOMAINS
.h2 COOKIE_REJECT_DOMAINS
# COOKIE_ACCEPT_DOMAINS and COOKIE_REJECT_DOMAINS are comma-delimited lists
# of domains from which Lynx should automatically accept or reject cookies
# without asking for confirmation.  If the same domain is specified in both
# lists, rejection will take precedence.
# Note that in order to match cookies, domains have to be spelled out exactly
# in the form in which they would appear on the Cookie Jar page (case is
# insignificant).  They are not wildcards.  Domains that apply to more than
# one host have a leading '.', but have to match *the cookie's* domain
# exactly.
#
#COOKIE_ACCEPT_DOMAINS:
#COOKIE_REJECT_DOMAINS:

.h2 COOKIE_LOOSE_INVALID_DOMAINS
.h2 COOKIE_STRICT_INVALID_DOMAINS
.h2 COOKIE_QUERY_INVALID_DOMAINS
# COOKIE_LOOSE_INVALID_DOMAINS, COOKIE_STRICT_INVALID_DOMAINS, and
# COOKIE_QUERY_INVALID_DOMAINS are comma-delimited lists of domains.
# They control the degree of validity checking that is applied to cookies
# for the specified domains.
# Note that in order to match cookies, domains have to be spelled out exactly
# in the form in which they would appear on the Cookie Jar page (case is
# insignificant).  They are not wildcards.  Domains that apply to more than
# one host have a leading '.', but have to match *the cookie's* domain
# exactly.
# If a domain is set to strict checking, strict conformance to RFC2109 will
# be applied.  A domain with loose checking will be allowed to set cookies
# with an invalid path or domain attribute.  All domains will default to
# asking the user for confirmation in case of an invalid path or domain.
# Cookie validity checking takes place as a separate step before the
# final decision to accept or reject (see previous options), therefore
# a cookie that passes validity checking may still be automatically
# rejected or cause another prompt.
#
#COOKIE_LOOSE_INVALID_DOMAINS:
#COOKIE_STRICT_INVALID_DOMAINS:
#COOKIE_QUERY_INVALID_DOMAINS:

#PERSISTENT_COOKIES:TRUE
COOKIE_FILE:.config/lynx/cookies
CASE_SENSITIVE_ALWAYS_ON:FALSE
DEFAULT_BOOKMARK_FILE:.config/lynx/bookmarks.html
MULTI_BOOKMARK_SUPPORT:TRUE

.h2 HTTP_PROXY
.h2 HTTPS_PROXY
.h2 FTP_PROXY
.h2 GOPHER_PROXY
.h2 NEWSPOST_PROXY
.h2 NEWSREPLY_PROXY
.h2 NEWS_PROXY
.h2 NNTP_PROXY
.h2 SNEWSPOST_PROXY
.h2 SNEWSREPLY_PROXY
.h2 SNEWS_PROXY
.h2 WAIS_PROXY
.h2 FINGER_PROXY
.h2 CSO_PROXY
# Lynx version 2.2 and beyond supports the use of proxy servers that can act as
# firewall gateways and caching servers.  They are preferable to the older
# gateway servers.  Each protocol used by Lynx can be mapped separately using
# PROTOCOL_proxy environment variables (see Lynx Users Guide).  If you have not set
# them externally, you can set them at run time via this configuration file.
# They will not override external settings.  The no_proxy variable can be used
# to inhibit proxying to selected regions of the Web (see below).  Note that on
# VMS these proxy variables are set as process logicals rather than symbols, to
# preserve lowercasing, and will outlive the Lynx image.
#
.ex 15
#http_proxy:http://some.server.dom:port/
#https_proxy:http://some.server.dom:port/
#ftp_proxy:http://some.server.dom:port/
#gopher_proxy:http://some.server.dom:port/
#news_proxy:http://some.server.dom:port/
#newspost_proxy:http://some.server.dom:port/
#newsreply_proxy:http://some.server.dom:port/
#snews_proxy:http://some.server.dom:port/
#snewspost_proxy:http://some.server.dom:port/
#snewsreply_proxy:http://some.server.dom:port/
#nntp_proxy:http://some.server.dom:port/
#wais_proxy:http://some.server.dom:port/
#finger_proxy:http://some.server.dom:port/
#cso_proxy:http://some.server.dom:port/
#no_proxy:host.domain.dom


.h2 NO_PROXY
# The no_proxy variable can be a comma-separated list of strings defining
# no-proxy zones in the DNS domain name space.  If a tail substring of the
# domain-path for a host matches one of these strings, transactions with that
# node will not be proxied.
.ex
#no_proxy:domain.path1,path2
#
# A single asterisk as an entry will override all proxy variables and no
# transactions will be proxied.
.ex
#no_proxy:*
# This is the only allowed use of * in no_proxy.
#
# Warning:  Note that setting 'il' as an entry in this list will block proxying
# for the .mil domain as well as the .il domain.  If the entry is '.il' this
# will not happen.


.h1 External Programs

.h2 PRINTER
.h2 DOWNLOADER
.h2 UPLOADER
# PRINTER, DOWNLOADER & UPLOADER DEFINITIONS:
# Lynx has 4 pre-defined print options & 1 pre-defined download option,
# which are called up on-screen when `p' or `d' are entered;
# any number of options can be added by the user, as explained below.
# Uploaders can be defined only for UNIX with DIRED_SUPPORT:
# see the Makefile in the top directory & the header of src/LYUpload.c .
#
# For `p' pre-defined options are: `Save to local file', `E-mail the file',
# `Print to screen' and `Print to local printer attached to vt100'.
# `Print to screen' allows file transfers in the absence of alternatives
# and is often the only option allowed here for anonymous users;
# the 3rd & 4th options are not pre-defined for DOS/WINDOWS versions of Lynx.
# For `d' the pre-defined option is: `Download to local file'.
#
# To define your own print or download option use the following formats:
#
# PRINTER:<name>:<command>:<option>:<lines/page>[:<environment>]
#
# DOWNLOADER:<name>:<command>:<option>[:<environment>]
#
# <name>       is what you will see on the print/download screen.
#
# <command>    is the command your system will execute:
#              the 1st %s in the command will be replaced
#              by the temporary filename used by Lynx;
#              a 2nd %s will be replaced by a filename of your choice,
#              for which Lynx will prompt, offering a suggestion.
#              On Unix, which has pipes, you may use a '|' as the first
#              character of the command, and Lynx will open a pipe to
#              the command.
#              If the command format of your printer/downloader requires
#              a different layout, you will need to use a script
#              (see the last 2 download examples below).
#
# <option>     TRUE : the printer/downloader will always be ENABLED,
#              except that downloading is disabled when -validate is used;
#              FALSE : both will be DISABLED for anonymous users
#              and printing will be disabled when -noprint is used.
#
# <lines/page> (printers: optional) the number of lines/page (default 66):
#              used to compute the approximate output size
#              and prompt if the document is > 4 printer pages;
#              it uses current screen length for the computation
#              when `Print to screen' is selected.
#
# [:<environment>]
#              optional, if XWINDOWS then printer/downloader will be
#              enabled if DISPLAY environment variable IS defined and
#              disabled otherwise, if environment is NON_XWINDOWS
#              then printer/downloader will be enabled if DISPLAY
#              environment variable IS NOT defined and disabled otherwise,
#              for anything else or if environment is not specified
#              printer/downloader is always enabled.
#
# You must put the whole definition on one line;
# if you use a colon, precede it with a backslash.
#
# `Printer' can be any file-handling program you find useful,
# even if it does not physically print anything.
#
# Usually, down/up-loading involves the use of (e.g.) Ckermit or ZModem
# to transfer files to a user's local machine over a serial link,
# but download options do not have to be download-protocol programs.
#
# Printer examples:
.ex 3
#PRINTER:Computer Center printer:lpr -Pccprt %s:FALSE
#PRINTER:Office printer:lpr -POffprt %s:TRUE
#PRINTER:VMS printer:print /queue=cc$print %s:FALSE:58
# If you have a very busy VMS print queue
# and Lynx deletes the temporary files before they have been queued,
# use the VMSPrint.com included in the distribution:
.ex
#PRINTER:Busy VMS printer:@Lynx_Dir\:VMSPrint sys$print %s:FALSE:58
# To specify a print option at run-time:
# NBB if you have ANONYMOUS users, DO NOT allow this option!
.ex
PRINTER:Specify at run-time:echo -n "Enter a print command\: "; read word; sh -c "$word %s":FALSE
# To pass to a sophisticated file viewer: -k suppresses invocation
# of hex display mode if 8-bit or control characters are present;
# +s invokes secure mode (see ftp://space.mit.edu/pub/davis/most):
.ex
#PRINTER:Use Most to view:most -k +s %s:TRUE:23
#
# Downloader examples:
# in Kermit, -s %s is the filename sent, -a %s the filename on arrival
# (if they are given in reverse order here, the command will fail):
.ex
#DOWNLOADER:Use Kermit to download to the terminal:kermit -i -s %s -a %s:TRUE
# NB don't use -k with Most, so that binaries will invoke hexadecimal mode:
.ex
#DOWNLOADER:Use Most to view:most +s %s:TRUE
# The following example gives wrong filenames
# (`sz' doesn't support a suggested filename parameter):
.ex
#DOWNLOADER:Use Zmodem to download to the local terminal:sz %s:TRUE
# The following example returns correct filenames
# by using a script to make a subdirectory in /tmp,
# but may conflict with very strong security or permissions restrictions:
.ex
#DOWNLOADER:Use Zmodem to download to the local terminal:set %s %s;td=/tmp/Lsz$$;mkdir $td;ln -s $1 $td/"$2";sz $td/"$2";rm -r $td:TRUE
.ex 2
#UPLOADER:Use Kermit to upload from your computer: kermit -i -r -a %s:TRUE
#UPLOADER:Use Zmodem to upload from your computer: rz %s:TRUE


.h1 Appearance

# MIME types and viewers!
#
# file extensions may be assigned to MIME types using
# the SUFFIX: definition.
#
# NOTE: It is normally preferable to define new extension mappings in
#       EXTENSION_MAP files (see below) instead of here:  Definitions
#       here are overridden by those in EXTENSION_MAP files and even by
#       some built-in defaults in src/HTInit.c.  On the other hand,
#       definitions here allow some more fields that are not possible
#       in those files.
#
#       Extension mappings have an effect mostly for ftp and local files,
#       they are NOT used to determine the type of content for URLs with
#       the http protocol.  This is because HTTP servers already specify
#       the MIME type in the Content-Type header.  [It may still be
#       necessary to set up an appropriate suffix for some MIME types,
#       even if they are accessed only via the HTTP protocol, if the viewer
#       (see below) for those MIME types requires a certain suffix for the
#       temporary file passed to it.]


.h1 External Programs

.h2 GLOBAL_EXTENSION_MAP
.h2 PERSONAL_EXTENSION_MAP
# The global and personal EXTENSION_MAP files allow you to assign extensions
# to MIME types which will override any of the suffix maps in this (lynx.cfg)
# configuration file, or in src/HTInit.c.  See the example mime.types file
# in the samples subdirectory.
#
# Unix:
# ====
#GLOBAL_EXTENSION_MAP:/usr/local/lib/mosaic/mime.types
# VMS:
# ===
#GLOBAL_EXTENSION_MAP:Lynx_Dir:mime.types
#
#	Unix (sought in user's home directory):
#PERSONAL_EXTENSION_MAP:.mime.types
#	VMS (sought in user's sys$login directory):
#PERSONAL_EXTENSION_MAP:mime.types


.h2 SUFFIX
# The SUFFIX definition takes the form of:
#
#    SUFFIX:<file extension>:<mime type>:<encoding>:<quality>:<description>
#
# All fields after <mime type> are optional (including the separators
# if no more fields follow).
#
#     <file extension> trailing end of file name.  This need not strictly
#                      be a file extension as understood by the OS, a dot
#                      has to be given explicitly if it is indented, for
#                      some uses one could even match full filenames here.
#                      In addition, two forms are special: "*.*" and "*"
#                      refer to the defaults for otherwise unmatched files
#                      (the first for filenames with a dot somewhere in
#                      the name, the second without), these are currently
#                      mapped to text/plain in the (HTInit.c) builtin code.
#                      Lynx compares the file-extensions ignoring case.
#
#     <mime type> a MIME content type.  It can also contain a charset
#                 parameter, see example below.  This should be given in
#                 all lowercase, use <description> for more fancy labels.
#                 It can be left empty if an HTTP style encoding is given.
#
# Fields in addition to the usual ones are
#
#     <encoding>  either a mail style trivial encoding (7bit, 8bit, binary)
#                 which could be used on some systems to determine how to
#                 open local files (currently it isn't), and is used to
#                 determine transfer mode for some FTP URLs; or a HTTP style
#                 content encoding (gzip (equivalent to x-gzip), compress)
#
#     <quality> a floating point quality factor, usually between 0.0 and 1.0
#               currently unused in most situations.
#
#     <description> text that can appear in FTP directory listings, and in
#                   local directory listings (see LIST_FORMAT, code %t)
#
# For instance the following definition maps the
# extension ".gif" to the mime type "image/gif"
.ex
#    SUFFIX:.gif:image/gif
#
# The following can be used if you have a convention to label
# HTML files in some character set that differs from your local
# default (see also ASSUME_LOCAL_CHARSET) with a different
# extension, here ".html-u8".  It also demonstrates use of the
# description field, note extra separators for omitted fields:
.ex
#    SUFFIX:.html-u8:text/html;charset=utf-8:::UTF-8 HTML
#
# The following shows how a suffix can indicate a combination
# of MIME type and compression method. (The ending ".ps.gz" should
# already be recognized by default; the form below could be used on
# systems that don't allow more than one dot in filenames.)
.ex
#    SUFFIX:.ps_gz:application/postscript:gzip::gzip'd Postscript
#
# The following is meant to match a full filename (but can match
# any file ending in "core", so be careful):
.ex
#    SUFFIX:core:application/x-core-file
#
# file suffixes are case INsensitive!
#
# The suffix definitions listed here in the default lynx.cfg file are
# similar to those normally established via src/HTInit.c.  You can change
# the defaults by editing that file or disable them, or via the global or
# personal mime.types files at run time (except for the additional fields).
# Assignments made here are overridden by entries in those files
# unless preceded with a SUFFIX_ORDER:PRECEDENCE_HERE.
#
.ex 29
#SUFFIX:.ps:application/postscript
#SUFFIX:.eps:application/postscript
#SUFFIX:.ai:application/postscript
#SUFFIX:.rtf:application/rtf
#SUFFIX:.snd:audio/basic
#SUFFIX:.gif:image/gif
#SUFFIX:.rgb:image/x-rgb
#SUFFIX:.png:image/png
#SUFFIX:.xbm:image/x-xbitmap
#SUFFIX:.tiff:image/tiff
#SUFFIX:.jpg:image/jpeg
#SUFFIX:.jpeg:image/jpeg
#SUFFIX:.mpg:video/mpeg
#SUFFIX:.mpeg:video/mpeg
#SUFFIX:.mov:video/quicktime
#SUFFIX:.hqx:application/mac-binhex40
#SUFFIX:.bin:application/octet-stream
#SUFFIX:.exe:application/octet-stream
#SUFFIX:.tar:application/x-tar
#SUFFIX:.tgz:application/x-tar:gzip
#SUFFIX:.Z::compress
#SUFFIX:.gz::gzip
#SUFFIX:.bz2:application/x-bzip2
#SUFFIX:.zip:application/zip
#SUFFIX:.lzh:application/x-lzh
#SUFFIX:.lha:application/x-lha
#SUFFIX:.dms:application/x-dms
#SUFFIX:.html:text/html
#SUFFIX:.txt:text/plain



# Unix:
# =====
# XLOADIMAGE_COMMAND will be used as a default in src/HTInit.c for
# viewing image content types when the DISPLAY environment variable
# is set.  Make it the full path and name of the xli (also know as
# xloadimage or xview) command, or other image viewer.  It can be
# anything that will handle GIF, TIFF and other popular image formats
# (xli does).  The freeware distribution of xli is available in the
# ftp://ftp.x.org/contrib subdirectory.  The shareware, xv, also is
# suitable.  You must also have a "%s" for the filename; "&" for
# background is optional.  The default is defined in userdefs.h and can be
# overridden here, or via the global or personal mailcap files (see below).
# Make this empty (but not commented out) if you don't have such a
# viewer or don't want to disable the built-in default viewer
# mappings for image types.
# Note that open is used as the default for NeXT, instead of the
# XLOADIMAGE_COMMAND definition.
# If you use xli, you may want to add the -quiet flag.
#
#XLOADIMAGE_COMMAND:xli %s &

.h2 VIEWER
# MIME types may be assigned to external viewers using
# the VIEWER definition.
#
# NOTE: if you do not define a viewer to a new MIME type
#       that you assigned above then it will be saved to
#       disk by default.
#       It is normally preferable to define new viewers in
#       MAILCAP files (see below) instead of here:  Definitions
#       here are overridden by those in MAILCAP files and even
#       by some built-in defaults in src/HTInit.c.
#
# The VIEWER definition takes the form of:
#    VIEWER:<mime type>:<viewer command>[:<environment>]
#      where -mime type is the MIME content type of the file
#	     -viewer command is a system command that can be
#             used to display the file where %s is replaced
#             within the command with the physical filename
#             (e.g., "ghostview %s" becomes "ghostview /tmp/temppsfile")
#            -environment is optional.  The only valid keywords
#             are currently XWINDOWS and NON_XWINDOWS.  If the XWINDOWS
#             environment is specified then the viewer will only be
#             defined when the user has the environment variable DISPLAY
#             (DECW$DISPLAY on VMS) defined.  If the NON_XWINDOWS environment
#             is specified the specified viewer will only be defined when the
#             user DOES NOT have the environment variable DISPLAY defined.
#  examples:
#		VIEWER:image/gif:xli %s:XWINDOWS
#               VIEWER:image/gif:ascii-view %s:NON_XWINDOWS
#               VIEWER:application/start-elm:elm
#
# You must put the whole definition on one line.
#
# If you must use a colon in the viewer command, precede it with a backslash!
#
# The MIME_type:viewer:XWINDOWS definitions listed here in the lynx.cfg
# file are among those established via src/HTInit.c.  For the image types,
# HTInit.c uses the XLOADIMAGE_COMMAND definition in userdefs.h or above
# (open is used for NeXT).  You can change any of these defaults via the
# global or personal mailcap files.  Assignments made here will be overridden
# by entries in those files.
#
.ex 7
#VIEWER:application/postscript:ghostview %s&:XWINDOWS
#VIEWER:image/gif:xli %s&:XWINDOWS
#VIEWER:image/x-xbm:xli %s&:XWINDOWS
#VIEWER:image/png:xli %s&:XWINDOWS
#VIEWER:image/tiff:xli %s&:XWINDOWS
#VIEWER:image/jpeg:xli %s&:XWINDOWS
#VIEWER:video/mpeg:mpeg_play %s &:XWINDOWS


.h2 GLOBAL_MAILCAP
.h2 PERSONAL_MAILCAP
# The global and personal MAILCAP files allow you to specify external
# viewers to be spawned when Lynx encounters different MIME types, which
# will override any of the suffix maps in this (lynx.cfg) configuration
# file, or in src/HTInit.c.  See http://www.internic.net/rfc/rfc1524.txt
# and the example mailcap file in the samples subdirectory.
#
# Unix:
# ====
#GLOBAL_MAILCAP:/usr/local/lib/mosaic/mailcap
# VMS:
# ===
#GLOBAL_MAILCAP:Lynx_Dir:mailcap
#
# 	Sought in user's home (Unix) or sys$login (VMS) directory.
#PERSONAL_MAILCAP:.mailcap

.h2 PREFERRED_MEDIA_TYPES
# When doing a GET, lynx lists the MIME types which it knows how to present
# (the "Accept:" string).  Depending on your system configuration, the
# mime.types or other data given by the GLOBAL_EXTENSION_MAP may include many
# entries that lynx really does not handle.  Use this option to select one
# of the built-in subsets of the MIME types that lynx could list in the
# Accept.
#
# Values for this option are keywords:
#	INTERNAL	lynx's built-in types for internal conversions
#	CONFIGFILE	adds lynx.cfg
#	USER		adds PERSONAL_EXTENSION_MAP settings
#	SYSTEM		adds GLOBAL_EXTENSION_MAP  settings
#	ALL		adds lynx's built-in types for external conversions
#
#PREFERRED_MEDIA_TYPES:internal

.h2 PREFERRED_ENCODING
# When doing a GET, lynx tells what types of compressed data it can decompress
# (the "Accept-Encoding:" string).  This is determined by compiled-in support
# for decompression or external decompression programs.
#
# Values for this option are keywords:
#	NONE		Do not request compressed data
#	GZIP		For gzip
#	COMPRESS	For compress
#	BZIP2		For bzip2
#	ALL		All of the above.
#PREFERRED_ENCODING:all



.h1 Keyboard Input

.h2 KEYMAP
# Key remapping definitions!
#
# You may redefine the keymapping of any function in Lynx by
# using the KEYMAP option.  The basic form of KEYMAP is:
#  KEYMAP:<KEYSTROKE>:<LYNX FUNCTION>
# (See below for an extended format.)
#
# You must map upper and lowercase keys separately.
#
# A representative list of functions mapped to their default keys is
# provided below.  All of the mappings are commented out by default
# since they just repeat the default mappings, except for TOGGLE_HELP
# (see below).  See LYKeymap.c for the complete key mapping.  Use the
# 'K'eymap command when running Lynx for a list of the _current_ keymappings.
#
# (However, in contrast to the output of 'K' command,
# 'H'elp (lynx_help/*.html and lynx_help/keystrokes/*.html files) shows
# the default mapping unless you change that files manually,
# so you are responsible for possible deviations
# when you are changing any KEYMAP below).
.nf
#
# Keystrokes for special keys are represented by the following codes:
#         Up Arrow: 0x100
#       Down Arrow: 0x101
#      Right Arrow: 0x102
#       Left Arrow: 0x103
#        Page Down: 0x104
#          Page Up: 0x105
#      Keypad Home: 0x106 (see also 0x10A)
#       Keypad End: 0x107 (see also 0x10B)
#   Function key 1: 0x108
# vt100   Help Key: 0x108
# vt100     Do Key: 0x109
# vt100   Find Key: 0x10A (The key with label "Home" may be treated as Find)
# vt100 Select Key: 0x10B (The key with label "End" may be treated as Select)
#       Insert Key: 0x10C
# Remove (Del) Key: 0x10D
#      ignored key  0x10E (reserved for internal use, DO_NOTHING)
# Back (Shift) Tab: 0x10F
#    reserved code  0x11D (reserved for internal use with -use_mouse)
#    reserved code  0x290 (reserved for internal use with -use_mouse)
#
.fi
# Other codes not listed above may be available for additional keys,
# depending on operating system and libraries used to compile Lynx.
# On some systems, if compiled with recent versions of slang or ncurses
# (if macro USE_KEYMAPS was in effect during compilation), an additional
# level of key mapping is supported via an external ".lynx-keymaps" file.
# This file, if found in the home directory at startup, will always be
# used under those conditions; see lynx-keymaps distributed in the samples
# subdirectory for further explanation.  Note that mapping via
# .lynx-keymaps, if applicable, is a step that logically comes before the
# mappings done here: KEYMAP maps the result of that step (which still
# represents a key) to a function (which represents an action that Lynx
# should perform).
#
.nf
#KEYMAP:0x5C:SOURCE		# Toggle source viewing mode (show HTML source)
#KEYMAP:^R:RELOAD		# Reload the current document and redisplay
#KEYMAP:^U:NEXT_DOC		# Undo PREV_DOC)
#KEYMAP:q:QUIT			# Ask the user to quit
#KEYMAP:Q:ABORT			# Quit without verification
#KEYMAP:0x20:NEXT_PAGE		# Move down to next page
#KEYMAP:-:PREV_PAGE		# Move up to previous page
#KEYMAP:^P:UP_TWO		# Move display up two lines
#KEYMAP:0x10C:UP_TWO		# Function key Insert - Move display up two lines
#KEYMAP:^N:DOWN_TWO		# Move display down two lines
#KEYMAP:0x10D:DOWN_TWO		# Function key Remove - Move display down two lines
#KEYMAP:(:UP_HALF		# Move display up half a page
#KEYMAP:):DOWN_HALF		# Move display down half a page
#KEYMAP:^W:REFRESH		# Refresh the screen
#KEYMAP:^A:HOME			# Go to top of current document
#KEYMAP:0x106:HOME		# Keypad Home - Go to top of current document
#KEYMAP:0x10A:HOME		# Function key Find - Go to top of current document
#KEYMAP:^E:END			# Go to bottom of current document
#KEYMAP:0x107:END		# Keypad End - Go to bottom of current document
#KEYMAP:0x10B:END		# Function key Select - Go to bottom of current document
#KEYMAP:0x100:PREV_LINK		# Move to the previous link or page
#KEYMAP:0x101:NEXT_LINK		# Move to the next link or page
#KEYMAP:0x10F:FASTBACKW_LINK 	# Back Tab - Move to previous link or text area
#KEYMAP:^I:FASTFORW_LINK	# Tab key - Move always to next link or text area
#KEYMAP:^:FIRST_LINK		# Move to the first link on line
#KEYMAP:$:LAST_LINK		# Move to the last link on line
#KEYMAP:<:UP_LINK		# Move to the link above
#KEYMAP:>:DOWN_LINK		# Move to the link below
#KEYMAP:0x7F:HISTORY		# Show the history list
#KEYMAP:0x08:HISTORY		# Show the history list
#KEYMAP:0x103:PREV_DOC		# Return to the previous document in history stack
#KEYMAP:0x102:ACTIVATE		# Select the current link
#KEYMAP:0x109:ACTIVATE		# Function key Do - Select the current link
#KEYMAP:g:GOTO			# Goto a random URL
#KEYMAP:G:ECGOTO		# Edit the current document's URL and go to it
#KEYMAP:H:HELP			# Show default help screen
#KEYMAP:0x108:DWIMHELP		# Function key Help - Show a help screen
#KEYMAP:i:INDEX			# Show default index
#*** Edit FORM_LINK_* messages in LYMessages_en.h if you change NOCACHE ***
#KEYMAP:x:NOCACHE		# Force submission of form or link with no-cache
#*** Do not change INTERRUPT from 'z' & 'Z' ***
#KEYMAP:z:INTERRUPT		# Interrupt network transmission
#KEYMAP:m:MAIN_MENU		# Return to the main menu
#KEYMAP:o:OPTIONS		# Show the options menu
#KEYMAP:i:INDEX_SEARCH		# Search a server based index
#KEYMAP:/:WHEREIS		# Find a string within the current document
#KEYMAP:n:NEXT			# Find next occurrence of string within document
#KEYMAP:c:COMMENT		# Comment to the author of the current document
#KEYMAP:C:CHDIR			# Change current directory
#KEYMAP:e:EDIT			# Edit current document or form's textarea (call: ^Ve)
#KEYMAP:E:ELGOTO		# Edit the current link's URL or ACTION and go to it
#KEYMAP:=:INFO			# Show info about current document
#KEYMAP:p:PRINT			# Show print options
#KEYMAP:a:ADD_BOOKMARK		# Add current document to bookmark list
#KEYMAP:v:VIEW_BOOKMARK		# View the bookmark list
#KEYMAP:V:VLINKS		# List links visited during the current Lynx session
#KEYMAP:!:SHELL			# Spawn default shell
#KEYMAP:d:DOWNLOAD		# Download current link
#KEYMAP:j:JUMP			# Jump to a predefined target
#KEYMAP:k:KEYMAP		# Display the current key map
#KEYMAP:l:LIST			# List the references (links) in the current document
#KEYMAP:#:TOOLBAR		# Go to the Toolbar or Banner in the current document
#KEYMAP:^T:TRACE_TOGGLE		# Toggle detailed tracing for debugging
#KEYMAP:;:TRACE_LOG		# View trace log if available for the current session
#KEYMAP:*:IMAGE_TOGGLE		# Toggle inclusion of links for all images
#KEYMAP:[:INLINE_TOGGLE		# Toggle pseudo-ALTs for inlines with no ALT string
#KEYMAP:]:HEAD			# Send a HEAD request for current document or link
#*** Must be compiled with USE_EXTERNALS to enable EXTERN_LINK, EXTERN_PAGE ***
#KEYMAP:,:EXTERN_PAGE		# Run external program with current page
#KEYMAP:.:EXTERN_LINK		# Run external program with current link
#*** Escaping from text input fields with ^V is independent from this: ***
#KEYMAP:^V:SWITCH_DTD		# Toggle between SortaSGML and TagSoup HTML parsing
#KEYMAP:0x00:DO_NOTHING		# Does nothing (ignore this key)
#KEYMAP:0x10E:DO_NOTHING	# Does nothing (ignore this key)
#KEYMAP:{:SHIFT_LEFT		# shift the screen left
#KEYMAP:}:SHIFT_RIGHT		# shift the screen right
#KEYMAP:|:LINEWRAP_TOGGLE	# toggle linewrap on/off, for shift-commands
#KEYMAP:~:NESTED_TABLES		# toggle nested-tables parsing on/off
#
.fi
# In addition to the bindings available by default, the following functions
# are not directly mapped to any keys by default, although some of them may
# be mapped in specific line-editor bindings (effective while in text input
# fields):
.nf
#
#KEYMAP:???:RIGHT_LINK		# Move to the link to the right
#KEYMAP:???:LEFT_LINK		# Move to the link to the left
#KEYMAP:???:LPOS_PREV_LINK	# Like PREV_LINK, last column pos if form input
#KEYMAP:???:LPOS_NEXT_LINK	# Like NEXT_LINK, last column pos if form input
#*** Only useful in form text fields , need PASS or prefixing with ^V: ***
#KEYMAP:???:DWIMHELP		# Display help page that may depend on context
#KEYMAP:???:DWIMEDIT		# Use external editor for context-dependent purpose
#*** Only useful in a form textarea, need PASS or prefixing with ^V: ***
#KEYMAP:???:EDITTEXTAREA	# use external editor to edit a form textarea
#KEYMAP:???:GROWTEXTAREA	# Add some blank lines to bottom of textarea
#KEYMAP:???:INSERTFILE		# Insert file into a textarea (just above cursor)
#*** Only useful with dired support and OK_INSTALL: ***
#KEYMAP:???:INSTALL		# install (i.e. copy) local files to new location
.fi
#
# If TOGGLE_HELP is mapped, in novice mode the second help menu line
# can be toggled among NOVICE_LINE_TWO_A, _B, and _C, as defined in
# LYMessages_en.h  Otherwise, it will be NOVICE_LINE_TWO.
#
#KEYMAP:O:TOGGLE_HELP		# Show other commands in the novice help menu
#
# KEYMAP lines can have one or two additional fields.  The extended format is
#  KEYMAP:<KEYSTROKE>:[<MAIN LYNX FUNCTION>]:<OTHER BINDING>[:<SELECT>]
#
# If the additional field OTHER BINDING specifies DIRED, then the function is
# mapped in the override table used only in DIRED mode.  This is only valid
# if lynx was compiled with dired support and OK_OVERRIDE defined.  A
# MAIN LYNX FUNCTION must be given (it should of course be one that makes
# sense in Dired mode), and SELECT is meaningless.  Default built-in override
# mappings are
#
#KEYMAP:^U:NEXT_DOC:DIRED	# Undo going back to the previous document
#KEYMAP:.:TAG_LINK:DIRED	# Tag a file or directory for later action
#KEYMAP:c:CREATE:DIRED		# Create a new file or directory
#KEYMAP:C:CHDIR:DIRED		# change current directory
#KEYMAP:f:DIRED_MENU:DIRED	# Display a menu of file operations
#KEYMAP:m:MODIFY:DIRED		# Modify name or location of a file or directory
#KEYMAP:r:REMOVE:DIRED		# Remove files or directories
#KEYMAP:t:TAG_LINK:DIRED	# Tag a file or directory for later action
#KEYMAP:u:UPLOAD:DIRED		# Show menu of "Upload Options"
#
# If the OTHER BINDING field does not specify DIRED, then it is taken as a
# line-editor action.  It is possible to keep the MAIN LYNX FUNCTION field
# empty in that case, for changing only the line-editing behavior.
# If alternative line edit styles are compiled in, and modifying a key's
# line-editor binding on a per style basis is possible, then SELECT can be
# used to specify which styles are affected.  By default, or if SELECT is
# 0, all line edit styles are affected.  If SELECT is a positive integer
# number, only the binding for the numbered style is changed (numbering
# is in the order in which styles are shown in the Options Menu, starting
# with 1 for the Default style).  If SELECT is negative (-n), all styles
# except n are affected.
.nf
#
#  NOP		# Do Nothing
#  ABORT	# Input cancelled
#
#  BOL		# Go to begin of line
#  EOL		# Go to end   of line
#  FORW		# Cursor forwards
#  FORW_RL	# Cursor forwards or right link
#  BACK		# Cursor backwards
#  FORWW	# Word forward
#  BACKW	# Word back
#  BACK_LL	# Cursor backwards or left link
#
#  DELN		# Delete next/curr char
#  DELP		# Delete prev      char
#  DELNW	# Delete next word
#  DELPW	# Delete prev word
#  DELBL	# Delete back to BOL
#  DELEL	# Delete thru EOL
#  ERASE	# Erase the line
#  LOWER	# Lower case the line
#  UPPER	# Upper case the line
#
#  LKCMD	# In fields: Invoke key command prompt (default for ^V)
#  PASS		# In fields: handle as non-lineedit key; in prompts: ignore
#
.fi
# Modify following key (prefixing only works within line-editing, edit actions
# of some resulting prefixed keys are built-in, see Line Editor help pages)
#  SETM1	# Set modifier 1 flag (default for ^X - key prefix)
#  SETM2	# Set modifier 2 flag (another key prefix - same effect)
#
# May not always be compiled in:
.nf
#
#  TPOS		# Transpose characters
#  SETMARK	# emacs-like set-mark-command
#  XPMARK	# emacs-like exchange-point-and-mark
#  KILLREG	# emacs-like kill-region
#  YANK		# emacs-like yank
#  SWMAP	# Switch input keymap
#  PASTE	# ClipBoard to Lynx - Windows Extension
#
.fi
# May work differently from expected if not bound to their expected keys:
.nf
#
#  CHAR		# Insert printable char (default for all ASCII printable)
#  ENTER	# Input complete, return char/lynxkeycode (for RETURN/ENTER)
#  TAB		# Input complete, return TAB (for ASCII TAB char ^I)
#
.fi
# Internal use, probably not useful for binding, listed for completeness:
.nf
#
#  UNMOD	# Fall back to no-modifier command
#  AIX		# Hex 97
#  C1CHAR	# Insert C1 char if printable
#
.fi
# If OTHER BINDING specifies PASS, then if the key is pressed in a text input
# field it is passed by the built-in line-editor to normal KEYMAP handling,
# i.e. this flag acts like an implied ^V escape (always overrides line-editor
# behavior of the key).  For example,
#KEYMAP:0x10C:UP_TWO:PASS # Function key Insert - Move display up two lines
#
# Other examples (repeating built-in bindings)
#KEYMAP:^V::LKCMD	# set (only) line-edit action for ^V
#KEYMAP:^V:SWITCH_DTD:LKCMD # set main lynxaction and line-edit action for ^V
#KEYMAP:^U::ERASE:1	# set line-edit binding for ^U, for default style
#KEYMAP:^[::SETM2:3	# use escape key as modifier - works only sometimes


.h1 External Programs
# These settings control the ability of Lynx to invoke various programs for
# the user.

.h2 CSWING_PATH
# VMS ONLY:
#==========
# On VMS, CSwing (an XTree emulation for VTxxx terminals) is intended for
# use as the Directory/File Manager (sources, objects, or executables are
# available from ftp://narnia.memst.edu/).  CSWING_PATH should be defined
# here or in userdefs.h to your foreign command for CSwing, with any
# regulatory switches you want included.  If not defined, or defined as
# a zero-length string ("") or "none" (case-insensitive), the support
# will be disabled.  It will also be disabled if the -nobrowse or
# -selective switches are used, or if the file_url restriction is set.
#
# When enabled, the DIRED_MENU command (normally 'f' or 'F') will invoke
# CSwing, normally with the current default directory as an argument to
# position the user on that node of the directory tree.  However, if the
# current document is a local directory listing, or a local file and not
# one of the temporary menu or list files, the associated directory will
# be passed as an argument, to position the user on that node of the tree.
#
#CSWING_PATH:swing


.h2 LIST_FORMAT
# LIST_FORMAT defines the display for local files when Lynx has been
# compiled with LONG_LIST defined in the Makefile.  The default is set
# in userdefs.h, normally to "ls -l" format, and can be changed here
# by uncommenting the indicated lines, or adding a definition with a
# modified parameter list.
#
# This feature is not available for VMS.
#
# The percent items in the list are interpreted as follows:
.nf
#
#	%p	Unix-style permission bits
#	%l	link count
#	%o	owner of file
#	%g	group of file
#	%d	date of last modification
#	%a	anchor pointing to file or directory
#	%A	as above but don't show symbolic links
#	%t	type of file (description derived from MIME type)
#	%T	MIME type as known by Lynx (from mime.types or default)
#	%k	size of file in Kilobytes
#	%K	as above but omit size for directories
#	%s	size of file in bytes
#
.fi
LIST_FORMAT:    %p %4l %-8.8o %-8.8g %7s %-12.12d %a


.h1 External Programs

.h2 DIRED_MENU
# Unix ONLY:
#===========
# DIRED_MENU items are used to compose the F)ull menu list in DIRED mode
# The behavior of the default configuration given here is much the same
# as it was when this menu was hard-coded but these items can now be adjusted
# to suit local needs.  In particular, many of the LYNXDIRED actions can be
# replaced with lynxexec, lynxprog and lynxcgi script references.
#
# NOTE that defining even one DIRED_MENU line overrides all the built-in
# definitions, so a complete set must then be defined here.
#
# Each line consists of the following fields:
.nf
#
#	DIRED_MENU:type:suffix:link text:extra text:action
#
#	type: TAG:   list only when one or more files are tagged
#	      FILE:  list only when the current selection is a regular file
#	      DIR:   list only when the current selection is a directory
#	      LINK:  list only when the current selection is a symbolic link
#
#	suffix:  list only if the current selection ends in this pattern
#
#	link text:  the displayed text of the link
#
#	extra text:  the text displayed following the link
#
#	action:  the URL to be followed upon selection
#
#	link text and action are scanned for % sequences that are expanded
#	at display time as follows:
#
#		%p  path of current selection
#		%f  filename (last component) of current selection
#		%t  tagged list (full paths)
#		%l  list of tagged file names
#		%d  the current directory
#
.fi
#DIRED_MENU:::New File:(in current directory):LYNXDIRED://NEW_FILE%d
#DIRED_MENU:::New Directory:(in current directory):LYNXDIRED://NEW_FOLDER%d

# Following depends on OK_INSTALL
#DIRED_MENU:FILE::Install:selected file to new location:LYNXDIRED://INSTALL_SRC%p
#DIRED_MENU:DIR::Install:selected directory to new location:LYNXDIRED://INSTALL_SRC%p

#DIRED_MENU:FILE::Modify File Name:(of current selection):LYNXDIRED://MODIFY_NAME%p
#DIRED_MENU:DIR::Modify Directory Name:(of current selection):LYNXDIRED://MODIFY_NAME%p
#DIRED_MENU:LINK::Modify Name:(of selected symbolic link):LYNXDIRED://MODIFY_NAME%p

# Following depends on OK_PERMIT
#DIRED_MENU:FILE::Modify File Permissions:(of current selection):LYNXDIRED://PERMIT_SRC%p
#DIRED_MENU:DIR::Modify Directory Permissions:(of current selection):LYNXDIRED://PERMIT_SRC%p

#DIRED_MENU:FILE::Change Location:(of selected file):LYNXDIRED://MODIFY_LOCATION%p
#DIRED_MENU:DIR::Change Location:(of selected directory):LYNXDIRED://MODIFY_LOCATION%p
#DIRED_MENU:LINK::Change Location:(of selected symbolic link):LYNXDIRED://MODIFY_LOCATION%p
#DIRED_MENU:FILE::Remove File:(current selection):LYNXDIRED://REMOVE_SINGLE%p
#DIRED_MENU:DIR::Remove Directory:(current selection):LYNXDIRED://REMOVE_SINGLE%p
#DIRED_MENU:LINK::Remove Symbolic Link:(current selection):LYNXDIRED://REMOVE_SINGLE%p

# Following depends on OK_UUDECODE and !ARCHIVE_ONLY
#DIRED_MENU:FILE::UUDecode:(current selection):LYNXDIRED://UUDECODE%p

# Following depends on OK_TAR and !ARCHIVE_ONLY
#DIRED_MENU:FILE:.tar.Z:Expand:(current selection):LYNXDIRED://UNTAR_Z%p

# Following depend on OK_TAR and OK_GZIP and !ARCHIVE_ONLY
#DIRED_MENU:FILE:.tar.gz:Expand:(current selection):LYNXDIRED://UNTAR_GZ%p
#DIRED_MENU:FILE:.tgz:Expand:(current selection):LYNXDIRED://UNTAR_GZ%p

# Following depends on !ARCHIVE_ONLY
#DIRED_MENU:FILE:.Z:Uncompress:(current selection):LYNXDIRED://DECOMPRESS%p

# Following depends on OK_GZIP and !ARCHIVE_ONLY
#DIRED_MENU:FILE:.gz:Uncompress:(current selection):LYNXDIRED://UNGZIP%p

# Following depends on OK_ZIP and !ARCHIVE_ONLY
#DIRED_MENU:FILE:.zip:Uncompress:(current selection):LYNXDIRED://UNZIP%p

# Following depends on OK_TAR and !ARCHIVE_ONLY
#DIRED_MENU:FILE:.tar:UnTar:(current selection):LYNXDIRED://UNTAR%p

# Following depends on OK_TAR
#DIRED_MENU:DIR::Tar:(current selection):LYNXDIRED://TAR%p

# Following depends on OK_TAR and OK_GZIP
#DIRED_MENU:DIR::Tar and compress:(using GNU gzip):LYNXDIRED://TAR_GZ%p

# Following depends on OK_ZIP
#DIRED_MENU:DIR::Package and compress:(using zip):LYNXDIRED://ZIP%p

#DIRED_MENU:FILE::Compress:(using Unix compress):LYNXDIRED://COMPRESS%p

# Following depends on OK_GZIP
#DIRED_MENU:FILE::Compress:(using gzip):LYNXDIRED://GZIP%p

# Following depends on OK_ZIP
#DIRED_MENU:FILE::Compress:(using zip):LYNXDIRED://ZIP%p

#DIRED_MENU:TAG::Move all tagged items to another location.::LYNXDIRED://MOVE_TAGGED%d

# Following depends on OK_INSTALL
#DIRED_MENU:TAG::Install tagged files into another directory.::LYNXDIRED://INSTALL_SRC%00

#DIRED_MENU:TAG::Remove all tagged files and directories.::LYNXDIRED://REMOVE_TAGGED
#DIRED_MENU:TAG::Untag all tagged items.::LYNXDIRED://CLEAR_TAGGED


.h1 Internal Behavior

.h2 NONRESTARTING_SIGWINCH
# Some systems only:
#===================
# Lynx tries to detect window size changes with a signal handler for
# SIGWINCH if supported.  If NONRESTARTING_SIGWINCH is set to TRUE,
# and the sigaction interface is available on the system, the handler
# is installed as 'non-restarting'.  On some systems (depending on the
# library used for handling keyboard input, e.g. ncurses), this allows
# more immediate notification of window size change events.  If the value
# is set to FALSE, the signal() interface is used; this normally makes
# the handler 'restarting', with the effect that lynx can react to size
# changes only after some key is pressed.  The value can also be set to
# XWINDOWS; this is equivalent to TRUE when the user has the environment
# variable DISPLAY defined *at program start*, and equivalent to FALSE
# otherwise.  The non-restarting behavior can also be changed to TRUE
# or FALSE with the -nonrestarting_sigwinch switch, which overrides the
# value in this file.
#
# Note that Lynx never re-parses document text purely as a result of a
# window size change, so text lines may appear truncated after narrowing
# the window, until the document is reloaded with ^R or a similar key
# or until a different text is loaded.
#
# The default is FALSE since there is a possibility that non-restarting
# interrupts may be mis-interpreted as fatal input errors in some
# configurations (leading to an abrupt program exit), and since this
# option is useful mostly only for users running Lynx under xterm or a
# similar X terminal emulator.  On systems where the preconditions don't
# apply this option is ignored.
#
#NONRESTARTING_SIGWINCH:FALSE


.h2 NO_FORCED_CORE_DUMP
# Unix ONLY:
#===========
# If NO_FORCED_CORE_DUMP is set to TRUE, Lynx will not force
# core dumps via abort() calls on fatal errors or assert()
# calls to check potentially fatal errors.  The compilation
# default normally is FALSE, and can be changed here.  The
# compilation or configuration default can be toggled via
# the -core command line switch.
# Note that this setting cannot be used to prevent core dumps
# with certainty.  If this is important, means provided by the
# operating system or kernel should be used.
#
#NO_FORCED_CORE_DUMP:FALSE


.h1 Appearance

.h2 COLOR
# COLORS (only available if compiled with SVr4 curses or slang)
#
# The line must be of the form:
#
# COLOR:Integer:Foreground:Background
.nf
#
# The Integer value is interpreted as follows:
#   0 - normal                      - normal text
#   1 - bold                        - hyperlinks, see also BOLD_* options above
#   2 - reverse                     - statusline
#   3 - bold + reverse              (not used)
#   4 - underline                   - text emphasis (EM, I, B tags etc.)
#   5 - bold + underline            - hyperlinks within text emphasis
#   6 - reverse + underline         - currently selected hyperlink
#   7 - reverse + underline + bold  - WHEREIS search hits
#
# Each Foreground and Background value must be one of:
#   black         red            green         brown
#   blue          magenta        cyan          lightgray
#   gray          brightred      brightgreen   yellow
#   brightblue    brightmagenta  brightcyan    white
.fi
# or (if you have configured using --enable-default-colors with ncurses or
# slang), "default" may be used for foreground and background.
#
# Note that in most cases a white background is really "lightgray", since
# terminals generally do not implement bright backgrounds.
#
# Uncomment and change any of the compilation defaults.
#
#COLOR:0:black:white
#COLOR:1:blue:white
#COLOR:2:yellow:blue
#COLOR:3:green:white
#COLOR:4:magenta:white
#COLOR:5:blue:white
#COLOR:6:red:white
COLOR:6:brightred:black
#COLOR:7:magenta:cyan


.h2 COLOR_STYLE
# Also known as "lss" (lynx style-sheet), the color-style file assigns color
# combination to tags and combinations of tags.  Normally a non-empty value
# is compiled into lynx, and the user can override that using the -lss
# command-line option.  The configure script allows one to compile in an
# empty string.  If lynx finds no value for this setting, it simulates the
# non-color-style assignments using the COLOR settings.
#
# If neither the command-line "-lss" or this COLOR_STYLE setting are given,
# lynx tries the environment variables "LYNX_LSS" and "lynx_lss".  If neither
# is set, lynx uses the compiled-in value (which as noted, may be empty).
#
#COLOR_STYLE: lynx.lss

.h2 NESTED_TABLES
# This is an experimental feature for improving table layout.
# It is enabled by default when the COLOR_STYLE configuration is used,
# and false otherwise.
#
NESTED_TABLES:TRUE


.h2 ASSUMED_COLOR
# If built with a library that recognizes default colors (usually ncurses or
# slang), and if the corresponding option is compiled into lynx, lynx
# initializes it to assume the corresponding foreground and background colors.
# Default colors are those that the terminal (emulator) itself is initialized
# to.  For instance, you might have an xterm running with black text on a white
# background, and want lynx to display colored text on the white background,
# but leave the possibility of using the same configuration to draw colored
# text on a different xterm, this time using its background set to black.
#
# If built with conventional SVr3/SVr4 curses, tells lynx to use color pair 0
# when the given colors match this setting.  That gives a similar effect,
# though not as flexible.  You will get the best results by setting the
# terminal's default colors to match the prevailing text and background colors
# that you have setup with lynx, and then alter the ASSUMED_COLOR setting to
# match that.  If you do not alter the ASSUMED_COLOR setting, curses assumes
# color pair 0's background is black, which implies that its foreground (text)
# is white.
#
# The first value given is the foreground, the second is the background.
#ASSUMED_COLOR:default:default

.h2 DEFAULT_COLORS
# If built with a library that recognizes default colors (usually ncurses or
# slang), and if the corresponding option is compiled into lynx, lynx
# initializes it to assume the corresponding foreground and background colors.
# Default colors are those that the terminal (emulator) itself is initialized
# to.
#
# Use this feature to disable the default-colors feature at runtime.
# This is useful for constructing scripts which use the non-color-style
# scheme, e.g., the oldlynx script.
#
# This should precede ASSUMED_COLOR settings.
#DEFAULT_COLORS:true


.h1 External Programs

.h2 EXTERNAL
# External application support.  This feature allows Lynx to pass a given
# URL to an external program.  It was written for three reasons.
#
# 1) To overcome the deficiency	of Lynx_386 not supporting ftp and news.
#    External programs can be used instead by passing the URL.
#
# 2) To allow for background	transfers in multitasking systems.
#    I use wget for http and ftp transfers via the external command.
#
# 3) To allow for new URLs to be used through Lynx.
#	  URLs can be made up such as mymail: to spawn desired applications
#	  via the external command.
#
# Restrictions can be imposed using -restrictions=externals at the Lynx command
# line.  This will disallow all EXTERNAL lines in lynx.cfg that have FALSE in
# the 3rd field (not counting the name of the setting).  TRUE lines will still
# function.
#
# The lynx.cfg line is as follows:
#
# EXTERNAL:<url>:<command> %s:<norestriction>:<allow_for_activate>[:environment]
#
# <url> Any given URL.  This can be normal ones like ftp or http or it
# can be one made up like mymail.
#
# <command> The command to run with %s being the URL that will be passed.
# In Linux I use "wget -q %s &" (no quotes) to spawn a copy of wget for
# downloading http and ftp files in the background.  In Win95 I use
# "start ncftp %s" to spawn ncftp in a new window.
#
# <norestriction> This complements the -restrictions=externals feature to allow
# for certain externals to be enabled while restricting others.  TRUE means
# a command will still function while Lynx is restricted.  WB
#
# <allow_for_activate> Setting this to TRUE allows the use of this command not
# only when EXTERN key is pressed, but also when ACTIVATE command is invoked
# (i.e., activating the link with the given prefix will be equivalent to
# pressing EXTERN key on it).  If this component of the line is absent, then
# FALSE is assumed.
#
# [:environment] Optional, if XWINDOWS then command is allowed only if
# $DISPLAY environment variable is set, else if NON_XWINDOWS then command
# is allowed only if $DISPLAY environment variable is not set, if absent or
# anything else command is always allowed.
#
# For invoking the command use the EXTERN_LINK or EXTERN_PAGE key.  By default
# EXTERN_LINK is mapped to '.', and EXTERN_PAGE to ',' (if the feature is
# enabled), see the KEYMAP section above.
#
#EXTERNAL:ftp:wget %s &:TRUE


.h1 Appearance

.h2 PRETTYSRC
# Enable pretty source view
PRETTYSRC:TRUE

.h2 PRETTYSRC_SPEC
# Pretty source view settings. These settings are in effect when -prettysrc
# is specified.
# The following lexical elements (lexemes) are recognized:
# comment, tag, attribute, attribute value, generalized angle brackets (
# '<' '>' '</' ), entity, hyperlink destination, entire file, bad sequence,
# bad tag, bad attribute, sgml special.
#  The following group of option tells which styles will surround each
# lexeme. The syntax of option in this group is:
#PRETTYSRC_SPEC:<LEXEMENAME>:<TAGSPEC>:<TAGSPEC>
# The first <TAGSPEC> specifies what tags will precede lexemes of that class
# in the internal html markup. The second - what will be placed (internally)
# after it.
# TAGSPEC has the following syntax:
# <TAGSPEC>:= [ (<TAGOPEN> | <TAGCLOSE>) <SPACE>+ ]*
# <TAGOPEN>:= tagname[.classname]
# <TAGCLOSE>:= !tagname
#
# The following table gives correspondence between lexeme and lexeme name
.nf
# Lexeme                   LEXEMENAME  FURTHER EXPLANATION
# =========================================================
# comment                  COMM
# tag                      TAG         recognized tag name only
# attribute                ATTRIB
# attribute value          ATTRVAL
# generalized brackets     ABRACKET    <  >  </
# entity                   ENTITY
# hyperlink destination    HREF
# entire file              ENTIRE
# bad sequence             BADSEQ      bad entity or invalid construct at text
#                                      level.
# bad tag                  BADTAG      Unrecognized construct in generalized
#                                      brackets.
# bad attribute            BADATTR     The name of the attribute unknown to lynx
#                                      of the tag known to lynx. (i.e.,
#                                      attributes of unknown tags will have
#                                      markup of  ATTRIB)
# sgml special             SGMLSPECIAL doctype, sgmlelt, sgmlele,
#                                      sgmlattlist, marked section, identifier
.fi
#
# Notes:
#
# 1) The markup for HTML_ENTIRE will be emitted only once - it will surround
#    entire file source.
#
# 2) The tagnames specified by TAGSPEC should be valid html tag names.
#
# 3) If the tag/class combination given by TAGOPEN is not assigned a color
#    style in lss file (for lynx compiled with lss support), that tag/class
#    combination will be emitted anyway during internal html markup. Such
#    combinations will be also reported to the trace log.
#
# 4) Lexeme 'tag' means tag name only
#
# 5) Angle brackets of html specials won't be surrounded by markup for ABRACKET
#
.ex
# PRETTYSRC_SPEC:COMM:B I:!I !B
#           HTML comments will be surrounded by <b><i> and </i></b> in the
#           internal html markup
.ex
# PRETTYSRC_SPEC:ATTRVAL: span.attrval : !span
#           Values of the attributes will be surrounded by the
#           <SPAN class=attrval> </SPAN>
.ex
# PRETTYSRC_SPEC:HREF::
#           No special html markup will surround hyperlink destinations (
#           this means that only default color style for hrefs will be applied
#           to them)
#
# For lynx compiled with lss support, the following settings are the default:
#PRETTYSRC_SPEC:COMM:span.htmlsrc_comment:!span
#PRETTYSRC_SPEC:TAG:span.htmlsrc_tag:!span
#PRETTYSRC_SPEC:ATTRIB:span.htmlsrc_attrib:!span
#PRETTYSRC_SPEC:ATTRVAL:span.htmlsrc_attrval:!span
#PRETTYSRC_SPEC:ABRACKET:span.htmlsrc_abracket:!span
#PRETTYSRC_SPEC:ENTITY:span.htmlsrc_entity:!span
#PRETTYSRC_SPEC:HREF:span.htmlsrc_href:!span
#PRETTYSRC_SPEC:ENTIRE:span.htmlsrc_entire:!span
#PRETTYSRC_SPEC:BADSEQ:span.htmlsrc_badseq:!span
#PRETTYSRC_SPEC:BADTAG:span.htmlsrc_badtag:!span
#PRETTYSRC_SPEC:BADATTR:span.htmlsrc_badattr:!span
#PRETTYSRC_SPEC:SGMLSPECIAL:span.htmlsrc_sgmlspecial:!span
# the styles corresponding to them are present in sample .lss file.
# For lynx compiled without lss support, the following settings are the default:
#PRETTYSRC_SPEC:COMM:b:!b
#PRETTYSRC_SPEC:TAG:b:!b
#PRETTYSRC_SPEC:ATTRIB:b:!b
#PRETTYSRC_SPEC:ATTRVAL::
#PRETTYSRC_SPEC:ABRACKET:b:!b
#PRETTYSRC_SPEC:ENTITY:b:!b
#PRETTYSRC_SPEC:HREF::
#PRETTYSRC_SPEC:ENTIRE::
#PRETTYSRC_SPEC:BADSEQ:b:!b
#PRETTYSRC_SPEC:BADTAG::
#PRETTYSRC_SPEC:BADATTR::
#PRETTYSRC_SPEC:SGMLSPECIAL:b:!b


.h1 Timeouts

.h2 CONNECT_TIMEOUT
# Specifies (in seconds) connect timeout. Default value is rather huge.
#CONNECT_TIMEOUT:18000

.h2 READ_TIMEOUT
# Specifies (in seconds) read-timeout. Default value is rather huge.
#READ_TIMEOUT:18000

FTP_PASSIVE:TRUE

.h2 ENABLE_LYNXRC
# The forms-based O'ptions menu shows a (!) marker beside items which are not
# saved to ~/.lynxrc -- the reason for disabling some of these items is that
# they are likely to cause confusion if they are read from the .lynxrc file for
# each session.  However, they can be enabled or disabled using the
# ENABLE_LYNXRC settings.  The default (compiled-in) settings are shown below.
# The second column is the name by which a setting is saved to .lynxrc (which
# is chosen where possible to correspond with lynx.cfg).  Use "OFF" to disable
# writing a setting, "ON" to enable it.  Settings are read from .lynxrc after
# the corresponding data from lynx.cfg, so they override lynx.cfg, which is
# probably what users expect.
#
# Note that a few settings (Cookies and Show images) are comprised of more than
# one lynx.cfg setting.
.nf
#ENABLE_LYNXRC:accept_all_cookies:ON
#ENABLE_LYNXRC:assume_charset:OFF
#ENABLE_LYNXRC:auto_session:OFF
#ENABLE_LYNXRC:bookmark_file:ON
#ENABLE_LYNXRC:case_sensitive_searching:ON
#ENABLE_LYNXRC:character_set:ON
#ENABLE_LYNXRC:cookie_accept_domains:ON
#ENABLE_LYNXRC:cookie_file:ON
#ENABLE_LYNXRC:cookie_loose_invalid_domains:ON
#ENABLE_LYNXRC:cookie_query_invalid_domains:ON
#ENABLE_LYNXRC:cookie_reject_domains:ON
#ENABLE_LYNXRC:cookie_strict_invalid_domains:ON
#ENABLE_LYNXRC:dir_list_style:ON
#ENABLE_LYNXRC:display:OFF
#ENABLE_LYNXRC:emacs_keys:ON
#ENABLE_LYNXRC:file_editor:ON
#ENABLE_LYNXRC:file_sorting_method:ON
#ENABLE_LYNXRC:force_cookie_prompt:OFF
#ENABLE_LYNXRC:force_ssl_prompt:OFF
#ENABLE_LYNXRC:ftp_passive:OFF
#ENABLE_LYNXRC:kblayout:ON
#ENABLE_LYNXRC:keypad_mode:ON
#ENABLE_LYNXRC:lineedit_mode:ON
#ENABLE_LYNXRC:locale_charset:ON
#ENABLE_LYNXRC:make_links_for_all_images:OFF
#ENABLE_LYNXRC:make_pseudo_alts_for_inlines:OFF
#ENABLE_LYNXRC:multi_bookmark:ON
#ENABLE_LYNXRC:no_pause:OFF
#ENABLE_LYNXRC:personal_mail_address:ON
#ENABLE_LYNXRC:preferred_charset:ON
#ENABLE_LYNXRC:preferred_encoding:OFF
#ENABLE_LYNXRC:preferred_language:ON
#ENABLE_LYNXRC:preferred_media_types:OFF
#ENABLE_LYNXRC:raw_mode:OFF
#ENABLE_LYNXRC:run_all_execution_links:ON
#ENABLE_LYNXRC:run_execution_links_on_local_files:ON
#ENABLE_LYNXRC:scrollbar:OFF
#ENABLE_LYNXRC:select_popups:ON
#ENABLE_LYNXRC:send_useragent:OFF
#ENABLE_LYNXRC:session_file:OFF
#ENABLE_LYNXRC:set_cookies:OFF
#ENABLE_LYNXRC:show_color:ON
#ENABLE_LYNXRC:show_cursor:ON
#ENABLE_LYNXRC:show_dotfiles:ON
#ENABLE_LYNXRC:show_kb_rate:OFF
#ENABLE_LYNXRC:sub_bookmarks:ON
#ENABLE_LYNXRC:tagsoup:OFF
#ENABLE_LYNXRC:underline_links:OFF
#ENABLE_LYNXRC:user_mode:ON
#ENABLE_LYNXRC:useragent:OFF
#ENABLE_LYNXRC:verbose_images:ON
#ENABLE_LYNXRC:vi_keys:ON
#ENABLE_LYNXRC:visited_links:ON
.fi

.h2 SSL_CERT_FILE
# Set SSL_CERT_FILE to the file that contains all valid CA certificates lynx
# should accept, in case the $SSL_CERT_FILE environment variable is not set,
# e.g.,
#
#SSL_CERT_FILE:/etc/ssl/certs/ca-certificates.crt
#SSL_CERT_FILE:NULL

.h2 SYSLOG_REQUESTED_URLS
# Log the requested URLs using the syslog interface.
#SYSLOG_REQUESTED_URLS:TRUE

.h2 SYSLOG_TEXT
# Add the given text to calls made to syslog, to distinguish Lynx from other
# applications which use that interface.
#SYSLOG_TEXT:

.h1 Internal Behavior
.h2 BROKEN_FTP_RETR
# Some ftp servers are known to have a broken implementation of RETR.  If asked
# to retrieve a directory, they get confused and fails subsequent commands such
# as CWD and LIST.  Workaround: reconnect after a failed RETR, which is slow.
#
# Each BROKEN_FTP_RETR gives a string match for the reported FTP server version
#BROKEN_FTP_RETR:ProFTPD 1.2.5
#BROKEN_FTP_RETR:spftp/

.h2 BROKEN_FTP_EPSV
# Some ftp servers are known to have a broken implementation of EPSV.  The
# server will hang for a long time when we attempt to connect after issuing
# this command.   Workaround: do not use EPSV, just use PASV.
#
# Each BROKEN_FTP_EPSV gives a string match for the reported FTP server version
#BROKEN_FTP_EPSV:(Version wu-2.6.2-12)

.h1 Appearance
.h2 FTP_FORMAT
# FTP_FORMAT defines the display for remote files.
# It uses the same "%" codes as LIST_FORMAT.
#FTP_FORMAT:%d  %-16.16t %a  %K
